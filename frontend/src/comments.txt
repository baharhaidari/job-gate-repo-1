// import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
// import axios from "axios";

// // Async Thunk for login
// export const loginUser = createAsyncThunk(
//   "auth/loginUser",
//   async (formData, { rejectWithValue }) => {
//     try {
//       const response = await axios.post(
//         "http://localhost:5000/api/auth/login",
//         formData
//       );
//       localStorage.setItem("token", response.data.token); // Storing token in localStorage
//       return response.data;
//     } catch (error) {
//       return rejectWithValue(error.response.data.message || "Login failed");
//     }
//   }
// );

// // Async Thunk for signup
// export const signupUser = createAsyncThunk(
//   "auth/signupUser",
//   async (formData, { rejectWithValue }) => {
//     try {
//       const response = await axios.post(
//         "http://localhost:5000/api/auth/register",
//         formData
//       );
//       return response.data;
//     } catch (error) {
//       return rejectWithValue(error.response.data.message || "Signup failed");
//     }
//   }
// );

// const authSlice = createSlice({
//   name: "auth",
//   initialState: {
//     user: null,
//     token: localStorage.getItem("token") || null,
//     loading: false,
//     error: null,
//     success: false,
//   },
//   reducers: {
//     logout: (state) => {
//       state.user = null;
//       state.token = null;
//       localStorage.removeItem("token");
//     },
//   },
//   extraReducers: (builder) => {
//     // Handle login lifecycle
//     builder
//       .addCase(loginUser.pending, (state) => {
//         state.loading = true;
//         state.error = null;
//         state.success = false;
//       })
//       .addCase(loginUser.fulfilled, (state, action) => {
//         state.loading = false;
//         state.token = action.payload.token;
//         state.user = action.payload.user;
//         state.success = true;
//       })
//       .addCase(loginUser.rejected, (state, action) => {
//         state.loading = false;
//         state.error = action.payload;
//         state.success = false;
//       });

//     // Handle signup lifecycle
//     builder
//       .addCase(signupUser.pending, (state) => {
//         state.loading = true;
//         state.error = null;
//         state.success = false;
//       })
//       .addCase(signupUser.fulfilled, (state, action) => {
//         state.loading = false;
//         state.success = true;
//       })
//       .addCase(signupUser.rejected, (state, action) => {
//         state.loading = false;
//         state.error = action.payload;
//         state.success = false;
//       });
//   },
// });

// export const { logout } = authSlice.actions;

// export default authSlice.reducer;


















// import React, { useState } from "react";
// import { HiOutlineX } from "react-icons/hi";
// import { useParams } from "react-router-dom";

// const ApplyToJobPage = ({ job }) => {
//   const [proposal, setProposal] = useState("");
//   const [cv, setCv] = useState(null);
//   const [paymentSuggestion, setPaymentSuggestion] = useState("");
//   const [githubLink, setGithubLink] = useState("");
//   const [rate, setRate] = useState("$10.00");
//   const [rateIncrease, setRateIncrease] = useState("");
//   const [coverLetter, setCoverLetter] = useState("");
//   const [errorMessage, setErrorMessage] = useState("");
//   const [successMessage, setSuccessMessage] = useState("");
//   const { jobId } = useParams();

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     // Check if required fields are filled
//     if (!proposal || !coverLetter || !cv) {
//       setErrorMessage("Please fill in all required fields.");
//       return;
//     }

//     const formData = new FormData();
//     formData.append("proposal", proposal);
//     formData.append("cvUrl", cv); // File upload
//     formData.append("paymentSuggestion", paymentSuggestion);
//     formData.append("githubLink", githubLink);
//     formData.append("rate", rate);
//     formData.append("rateIncrease", rateIncrease);
//     formData.append("coverLetter", coverLetter);

//     try {
//       const response = await axios.post(`/jobs/${job?.id}/apply`, formData, {
//         headers: {
//           "Content-Type": "multipart/form-data",
//           Authorization: `Bearer ${localStorage.getItem("token")}`, // Assuming token is stored in localStorage
//         },
//       });

//       if (response.status === 201) {
//         setSuccessMessage("Application submitted successfully!");
//         setErrorMessage(""); // Clear errors on success
//       }
//     } catch (error) {
//       setErrorMessage(
//         error.response?.data?.message || "Failed to apply for the job"
//       );
//     }
//   };

//   const handleCancel = () => {
//     // Reset form values or navigate away
//     setProposal("");
//     setCv(null);
//     setPaymentSuggestion("");
//     setGithubLink("");
//     setRateIncrease("");
//     setCoverLetter("");
//   };

//   const job = jobsData.find((job) => job.id === parseInt(jobId));

//   if (!job) {
//     return <p>Job not found</p>;
//   }

//   return (
// <div className="flex justify-center items-center py-20 px-16">
//   <div className="maxxl w-full">
//     <div className="relative mb-6">
//       <h1 className="text-4xl font-bold text-gray-800 mb-4">
//         Apply for {job?.title}
//       </h1>
//       <button
//         onClick={handleCancel}
//         className="absolute top-4 right-4 text-gray-600 text-3xl hover:text-gray-800 transition-colors duration-300"
//       >
//         <HiOutlineX />
//       </button>
//     </div>

//     {/* Job Details */}
//     <div className="bg-gray-50 p-10 rounded-lg shadow-inner mb-6">
//       <h2 className="text-2xl font-semibold text-gray-800 mb-4">
//         Job Details
//       </h2>
//       <p className="text-base text-gray-700 mb-2">
//         <strong>Type:</strong> {job?.type}
//       </p>
//       <p className="text-base text-gray-700 mb-2">
//         <strong>Experience Level:</strong> {job?.expreinceLevel}
//       </p>
//       <p className="text-base text-gray-700 mb-2">
//         <strong>Posted:</strong> {job?.daysLeft}
//       </p>
//       <p className="text-base text-gray-700 mb-2">
//         <strong>Hourly Range:</strong> {job?.hourlyRange}
//       </p>
//       <p className="text-base font-bold text-green-600 mb-4">
//         <strong>Salary:</strong> {job?.salary}
//       </p>
//       <p className="text-gray-800 mb-4">
//         <strong>Description:</strong> {job?.clientInfo?.description}
//       </p>
//       <div className="flex flex-wrap gap-2">
//         <strong className="text-base text-gray-800 mr-2">
//           Skills Required:
//         </strong>
//         {job?.skills?.map((skill, index) => (
//           <span
//             key={index}
//             className="bg-gray-200 text-gray-800 text-sm py-1 px-3 rounded-full border border-gray-300"
//           >
//             {skill}
//           </span>
//         ))}
//       </div>
//     </div>

//     {/* Rate and Budget */}
//     <div className="bg-gray-50 p-10 rounded-lg shadow-inner mb-6">
//       <h2 className="text-2xl font-semibold text-gray-800 mb-4">
//         Rate and Budget
//       </h2>
//       <p className="text-base text-gray-700 mb-2">
//         <strong>Your Profile Rate:</strong> $10.00/hr
//       </p>
//       <p className="text-base text-gray-700 mb-2">
//         <strong>Client’s Budget:</strong> $5.00 - $10.00/hr
//       </p>
//       <p className="text-base font-bold text-green-600 mb-4">
//         <strong>Total Amount Client Sees:</strong> $10.00/hr
//       </p>
//       <p className="text-base text-gray-700 mb-2">
//         <strong>10% Service Fee:</strong> -$1.00/hr
//       </p>
//       <p className="text-base font-bold text-green-600 mb-4">
//         <strong>Estimated Amount You’ll Receive:</strong> $9.00/hr
//       </p>
//     </div>

//     {/* Cover Letter */}
//     <div className="bg-gray-50 p-10 rounded-lg shadow-inner mb-6">
//       <h2 className="text-2xl font-semibold text-gray-800 mb-4">
//         Cover Letter
//       </h2>
//       <textarea
//         rows="10"
//         className="w-full border border-gray-300 rounded-md p-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500 transition-all duration-300 shadow-sm"
//         placeholder="Write your cover letter here..."
//         value={coverLetter}
//         onChange={(e) => setCoverLetter(e.target.value)}
//       />
//     </div>

//     {/* Attachments */}
//     <div className="bg-gray-50 p-10 rounded-lg shadow-inner mb-6">
//       <h2 className="text-2xl font-semibold text-gray-800 mb-4">
//         Attachments
//       </h2>
//       <p className="text__desc text-gray-700 mb-2">
//         Drag or upload project files. You may attach up to 10 files under
//         the size of 25 MB each. Include work samples or other documents to
//         support your application.
//       </p>
//       <input
//         type="file"
//         accept=".pdf,.doc,.docx"
//         className="w-full border border-gray-300 rounded-md p-2 text-gray-700 file:py-2 file:px-4 file:border file:border-gray-300 file:rounded-md file:bg-gray-100 file:text-gray-700 file:cursor-pointer transition-all duration-300 shadow-sm"
//         onChange={(e) => setCv(e.target.files[0])}
//       />
//     </div>

//     {/* GitHub Project Link */}
//     <div className="bg-gray-50 p-10 rounded-lg shadow-inner mb-6">
//       <h2 className="text-2xl font-semibold text-gray-800 mb-4">
//         GitHub Project Link
//       </h2>
//       <p className="text__desc text-gray-700 mb-2">
//         Add a GitHub project link and a README (optional). Including a
//         related project and an updated README file may increase your chances
//         of being selected by over 20%.
//       </p>
//       <input
//         type="url"
//         className="w-full border border-gray-300 rounded-md p-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500 transition-all duration-300 shadow-sm"
//         placeholder="Your GitHub project link..."
//         value={githubLink}
//         onChange={(e) => setGithubLink(e.target.value)}
//       />
//     </div>

//     {/* Rate Increase */}
//     <div className="bg-gray-50 p-10 rounded-lg shadow-inner mb-6">
//       <h2 className="text-2xl font-semibold text-gray-800 mb-4">
//         Rate Increase (Optional)
//       </h2>
//       <p className="text__desc text-gray-700 mb-4">
//         Propose an optional rate increase. If approved by your client, your
//         rate will increase automatically over the contract’s lifetime.
//       </p>
//       <div className="flex flex-col gap-7">
//         <div>
//           <label className="text-gray-700 text__desc font-medium">
//             How often do you want a rate increase?
//           </label>
//           <select
//             className="w-full mt-2 border border-gray-300 rounded-md p-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500 transition-all duration-300 shadow-sm"
//             value={rateIncrease}
//             onChange={(e) => setRateIncrease(e.target.value)}
//           >
//             <option value="">Select Frequency</option>
//             <option value="monthly">Monthly</option>
//             <option value="quarterly">Quarterly</option>
//             <option value="annually">Annually</option>
//           </select>
//         </div>

//         <div>
//           <label className="text-gray-700 text__desc font-medium mb-2">
//             How much of an increase do you want?
//           </label>
//           <input
//             type="number"
//             step="0.01"
//             className="w-full border border-gray-300 mt-2 rounded-md p-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500 transition-all duration-300 shadow-sm"
//             placeholder="Percentage increase..."
//             value={paymentSuggestion}
//             onChange={(e) => setPaymentSuggestion(e.target.value)}
//           />
//         </div>
//       </div>
//     </div>

//     {/* Submit Button */}
//     <div className="flex justify-between">
//       <button
//         onClick={handleSubmit}
//         className="bg-green-700 text-white px-6 py-3 rounded-md text-lg font-medium hover:bg-green-800 transition-colors duration-300"
//       >
//         Submit Proposal
//       </button>
//       <button
//         onClick={handleCancel}
//         className="bg-gray-300 text-gray-800 px-6 py-3 rounded-md text-lg font-medium hover:bg-gray-400 transition-colors duration-300"
//       >
//         Cancel
//       </button>
//     </div>
//   </div>
// </div>
//   );
// };

// export default ApplyToJobPage;






















import React, { useState, useEffect } from "react";
import axios from "axios";
import { HiOutlineX } from "react-icons/hi";
import { useParams } from "react-router-dom";

const ApplyToJobPage = () => {
  const [job, setJob] = useState(null);
  const [formData, setFormData] = useState({
    proposal: "",
    cv: null,
    paymentSuggestion: "",
    githubLink: "",
    rate: "",
    rateIncrease: "",
    coverLetter: "",
  });
  const [message, setMessage] = useState("");
  const [error, setError] = useState("");
  const { jobId } = useParams();

  // Handle form field changes
  const handleChange = (e) => {
    const { name, value, type, files } = e.target;
    if (type === "file") {
      setFormData({ ...formData, [name]: files[0] });
    } else {
      setFormData({ ...formData, [name]: value });
    }
  };

  // Fetch job details
  useEffect(() => {
    const fetchJob = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/jobs");
        const jobsData = response.data;
        const foundJob = jobsData.find((job) => job.id === parseInt(jobId));

        if (foundJob) {
          setJob(foundJob);
        } else {
          setError("Job not found.");
        }
      } catch (error) {
        setError("Failed to load job data.");
      }
    };

    fetchJob();
  }, [jobId]);

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Check for required fields
    if (!formData.proposal || !formData.coverLetter || !formData.cv) {
      setError("Please fill in all required fields.");
      return;
    }

    const form = new FormData();
    for (const key in formData) {
      if (formData[key]) {
        form.append(key, formData[key]);
      }
    }

    try {
      const token = localStorage.getItem("token");
      const response = await axios.post(
        `http://localhost:5000/api/jobs/${jobId}/apply`, // Use jobId dynamically
        form,
        {
          headers: {
            "Content-Type": "multipart/form-data",
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (response.status === 201) {
        setMessage("Application submitted successfully!");
        setFormData({
          proposal: "",
          cv: null,
          paymentSuggestion: "",
          githubLink: "",
          rate: "",
          rateIncrease: "",
          coverLetter: "",
        });
      }
    } catch (error) {
      setError(error.response?.data?.message || "Failed to apply for the job");
    }
  };

  const handleCancel = () => {
    setFormData({
      proposal: "",
      cv: null,
      paymentSuggestion: "",
      githubLink: "",
      rate: "",
      rateIncrease: "",
      coverLetter: "",
    });
  };

  if (!job) {
    return <p>{error || "Loading job details..."}</p>;
  }

  return (
    <div className="flex justify-center items-center py-20 px-16">
      <div className="w-full max-w-2xl">
        <div className="relative mb-6">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">
            Apply for {job?.title}
          </h1>
        </div>

        {/* Job Details */}
        <div className="bg-gray-50 p-10 rounded-lg shadow-inner mb-6">
          <h2 className="text-2xl font-semibold text-gray-800 mb-4">
            Job Details
          </h2>
          <p className="text-base text-gray-700 mb-2">
            <strong>Type:</strong> {job?.type}
          </p>
          <p className="text-base text-gray-700 mb-2">
            <strong>Experience Level:</strong> {job?.experienceLevel}
          </p>
          <p className="text-base text-gray-700 mb-2">
            <strong>Posted:</strong> {job?.daysLeft}
          </p>
          <p className="text-base font-bold text-green-600 mb-4">
            <strong>Salary:</strong> {job?.salary}
          </p>
          <p className="text-gray-800 mb-4">
            <strong>Description:</strong> {job?.description}
          </p>
        </div>

        {/* Proposal */}
        <div className="bg-gray-50 p-10 rounded-lg shadow-inner mb-6">
          <h2 className="text-2xl font-semibold text-gray-800 mb-4">
            Proposal
          </h2>
          <textarea
            rows="10"
            name="proposal"
            className="w-full border border-gray-300 rounded-md p-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500 transition-all duration-300 shadow-sm"
            placeholder="Write your proposal here..."
            value={formData.proposal}
            onChange={handleChange}
          />
        </div>

        <div className="bg-gray-50 p-10 rounded-lg shadow-inner mb-6">
          <h2 className="text-2xl font-semibold text-gray-800 mb-4">
            Cover Letter
          </h2>
          <textarea
            rows="10"
            className="w-full border border-gray-300 rounded-md p-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500 transition-all duration-300 shadow-sm"
            placeholder="Write your cover letter here..."
            value={formData.coverLetter}
            onChange={handleChange}
            name="cover_letter"
          />
        </div>

        {/* Attachments */}
        <div className="bg-gray-50 p-10 rounded-lg shadow-inner mb-6">
          <h2 className="text-2xl font-semibold text-gray-800 mb-4">
            Attachments
          </h2>
          <p className="text__desc text-gray-700 mb-2">
            Drag or upload project files. You may attach up to 10 files under
            the size of 25 MB each. Include work samples or other documents to
            support your application.
          </p>
          <input
            type="file"
            accept=".pdf,.doc,.docx"
            className="w-full border border-gray-300 rounded-md p-2 text-gray-700 file:py-2 file:px-4 file:border file:border-gray-300 file:rounded-md file:bg-gray-100 file:text-gray-700 file:cursor-pointer transition-all duration-300 shadow-sm"
            value={formData.cv}
            onChange={handleChange}
          />
        </div>

        {/* GitHub Project Link */}
        <div className="bg-gray-50 p-10 rounded-lg shadow-inner mb-6">
          <h2 className="text-2xl font-semibold text-gray-800 mb-4">
            GitHub Project Link
          </h2>
          <p className="text__desc text-gray-700 mb-2">
            Add a GitHub project link and a README (optional). Including a
            related project and an updated README file may increase your chances
            of being selected by over 20%.
          </p>
          <input
            type="url"
            className="w-full border border-gray-300 rounded-md p-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500 transition-all duration-300 shadow-sm"
            placeholder="Your GitHub project link..."
            value={formData.paymentSuggestion}
            onChange={handleChange}
          />
        </div>

        {/* Rate Increase */}
        <div className="bg-gray-50 p-10 rounded-lg shadow-inner mb-6">
          <h2 className="text-2xl font-semibold text-gray-800 mb-4">
            Rate Increase (Optional)
          </h2>
          <p className="text__desc text-gray-700 mb-4">
            Propose an optional rate increase. If approved by your client, your
            rate will increase automatically over the contract’s lifetime.
          </p>
          <div className="flex flex-col gap-7">
            <div>
              <label className="text-gray-700 text__desc font-medium">
                How often do you want a rate increase?
              </label>
              <select
                className="w-full mt-2 border border-gray-300 rounded-md p-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500 transition-all duration-300 shadow-sm"
                value={formData.rateIncrease}
                onChange={handleChange}
              >
                <option value="">Select Frequency</option>
                <option value="monthly">Monthly</option>
                <option value="quarterly">Quarterly</option>
                <option value="annually">Annually</option>
              </select>
            </div>

            <div>
              <label className="text-gray-700 text__desc font-medium mb-2">
                How much of an increase do you want?
              </label>
              <input
                type="number"
                step="0.01"
                className="w-full border border-gray-300 mt-2 rounded-md p-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500 transition-all duration-300 shadow-sm"
                placeholder="Percentage increase..."
                value={formData.rate}
                onChange={handleChange}
              />
            </div>

            <div>
              <label className="text-gray-700 text__desc font-medium mb-2">
                How much do you wanna Rate?
              </label>
              <input
                type="number"
                step="1"
                className="w-full border border-gray-300 mt-2 rounded-md p-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-green-500 transition-all duration-300 shadow-sm"
                placeholder="Percentage increase..."
                value={formData.rate}
                onChange={handleChange}
              />
            </div>
          </div>
        </div>

        {/* Submit Button */}
        <div className="flex justify-end mt-8">
          <button
            type="button"
            className="bg-gray-300 text-gray-800 py-2 px-6 rounded-md mr-4"
            onClick={handleCancel}
          >
            Cancel
          </button>
          <button
            type="submit"
            onClick={handleSubmit}
            className="bg-green-500 text-white py-2 px-6 rounded-md hover:bg-green-600 transition-colors duration-300"
          >
            Submit
          </button>
        </div>

        {/* Messages */}
        {message && <p className="text-green-600 mt-4">{message}</p>}
        {error && <p className="text-red-600 mt-4">{error}</p>}
      </div>
    </div>
  );
};

export default ApplyToJobPage;
































































// import React, { useState } from "react";
// import axios from "axios";

// const JobPostingPage = () => {
//   const [jobTitle, setJobTitle] = useState("");
//   const [description, setDescription] = useState("");
//   const [experienceLevel, setExperienceLevel] = useState("");
//   const [skills, setSkills] = useState([]);
//   const [skillInput, setSkillInput] = useState("");
//   const [paymentType, setPaymentType] = useState("");
//   const [budget, setBudget] = useState("");
//   const [file, setFile] = useState(null);
//   const [message, setMessage] = useState("");

//   const handleFileChange = (e) => {
//     setFile(e.target.files[0]);
//   };

//   const handleSkillInputChange = (e) => {
//     setSkillInput(e.target.value);
//   };

//   const handleAddSkill = (e) => {
//     e.preventDefault();
//     if (skillInput.trim() && !skills.includes(skillInput.trim())) {
//       setSkills((prevSkills) => [...prevSkills, skillInput.trim()]);
//       setSkillInput("");
//     }
//   };

//   const handleRemoveSkill = (skillToRemove) => {
//     setSkills((prevSkills) =>
//       prevSkills.filter((skill) => skill !== skillToRemove)
//     );
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     // Form data preparation
//     const formData = new FormData();
//     formData.append("title", jobTitle);
//     formData.append("description", description);
//     formData.append("experience_level", experienceLevel);
//     formData.append("skills", skills.join(", "));
//     formData.append("paymentType", paymentType);
//     formData.append("budget", budget);
//     if (file) {
//       formData.append("file", file);
//     }

//     try {
//       // Make the POST request to your backend
//       const response = await axios.post(
//         "http://localhost:5000/api/post-job",
//         formData,
//         {
//           headers: {
//             "Content-Type": "multipart/form-data",
//           },
//         }
//       );

//       // Reset form and show success message
//       setMessage("Job posted successfully!");
//       setJobTitle("");
//       setDescription("");
//       setExperienceLevel("");
//       setSkills([]);
//       setPaymentType("");
//       setBudget("");
//       setFile(null);
//     } catch (error) {
//       console.error("Error posting job:", error);
//       setMessage("Error posting job. Please try again.");
//     }
//   };

//   return (
//     <div className="flex items-center justify-center flex-col gap-14 py-20">
//       <h1 className="heading text-slate-700 font-semibold capitalize">
//         Post a <span className="text-green-700">Job!</span>
//       </h1>

//       <div className="px-20 w-full">
//         <div className="w-full p-8 border border-gray-200">
//           <p className="text-lg text-gray-600 mb-7">
//             <span className="uppercase text-green-700 text-xl font-semibold mr-1">
//               notice:
//             </span>
//             Fill out the detailed form below to post a job on our platform.
//           </p>

//           <h2 className="text-3xl font-bold text-green-700 mb-6">
//             Job Details
//           </h2>
//           <form onSubmit={handleSubmit} className="space-y-6">
//             {/* Job Title */}
//             <div>
//               <label
//                 htmlFor="jobTitle"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Job Title
//               </label>
//               <input
//                 id="jobTitle"
//                 type="text"
//                 value={jobTitle}
//                 onChange={(e) => setJobTitle(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               />
//             </div>

//             {/* Description */}
//             <div>
//               <label
//                 htmlFor="description"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Description
//               </label>
//               <textarea
//                 id="description"
//                 rows="4"
//                 value={description}
//                 onChange={(e) => setDescription(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               />
//             </div>

//             {/* Experience Level */}
//             <div>
//               <label
//                 htmlFor="experienceLevel"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Experience Level
//               </label>
//               <select
//                 id="experienceLevel"
//                 value={experienceLevel}
//                 onChange={(e) => setExperienceLevel(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               >
//                 <option value="" disabled>
//                   Select experience level
//                 </option>
//                 <option value="Entry">Entry Level</option>
//                 <option value="Mid">Mid Level</option>
//                 <option value="Senior">Senior Level</option>
//               </select>
//             </div>

//             {/* Skills Required */}
//             <div>
//               <label
//                 htmlFor="skills"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Skills Required
//               </label>

//               <div className="flex gap-2 items-center mb-4">
//                 <input
//                   id="skillInput"
//                   type="text"
//                   value={skillInput}
//                   onChange={handleSkillInputChange}
//                   placeholder="Add a skill"
//                   className="flex-1 border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//                 />
//                 <button
//                   type="button"
//                   onClick={handleAddSkill}
//                   className="bg-green-600 text-white py-2 px-4 rounded-xl hover:bg-green-700 transition-colors duration-300"
//                 >
//                   Add
//                 </button>
//               </div>

//               <div className="flex flex-wrap gap-2 mb-6">
//                 {skills.map((skill) => (
//                   <span
//                     key={skill}
//                     className="bg-green-200 text-green-800 text-base py-1 px-3 rounded-full flex items-center justify-center space-x-2"
//                   >
//                     <span>{skill}</span>
//                     <button
//                       type="button"
//                       onClick={() => handleRemoveSkill(skill)}
//                       className="text-slate-600 hover:text-red-800 text-xl"
//                     >
//                       &times;
//                     </button>
//                   </span>
//                 ))}
//               </div>
//             </div>

//             {/* Payment Type */}
//             <div>
//               <label
//                 htmlFor="paymentType"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Payment Type
//               </label>
//               <select
//                 id="paymentType"
//                 value={paymentType}
//                 onChange={(e) => setPaymentType(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               >
//                 <option value="" disabled>
//                   Select payment type
//                 </option>
//                 <option value="Hourly">Hourly</option>
//                 <option value="Fixed">Fixed</option>
//               </select>
//             </div>

//             {/* Budget */}
//             <div>
//               <label
//                 htmlFor="budget"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Budget
//               </label>
//               <input
//                 id="budget"
//                 type="text"
//                 value={budget}
//                 onChange={(e) => setBudget(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//                 placeholder="e.g., $500 - $1000"
//               />
//             </div>

//             {/* File Upload */}
//             <div>
//               <label
//                 htmlFor="file"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Upload a File or Image
//               </label>
//               <input
//                 id="file"
//                 type="file"
//                 onChange={handleFileChange}
//                 className="w-full border border-gray-300 rounded-xl p-4 bg-gray-50 file:border-0 file:bg-green-600 file:text-white file:py-2 file:px-4 file:rounded-xl hover:file:bg-green-700 transition-colors duration-300"
//               />
//             </div>

//             {/* Submit Button */}
//             <div className="flex justify-center">
//               <button
//                 type="submit"
//                 className="bg-green-600 text-white py-4 px-8 rounded-xl hover:bg-green-700 transition-colors duration-300"
//               >
//                 Post Job
//               </button>
//             </div>
//           </form>

//           {message && (
//             <p className="mt-6 text-center text-green-600">{message}</p>
//           )}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default JobPostingPage;

// import React, { useState } from "react";
// import axios from "axios";

// const JobPostingPage = () => {
//   const [title, setTitle] = useState("");
//   const [description, setDescription] = useState("");
//   const [experienceLevel, setExperienceLevel] = useState("");
//   const [location, setLocation] = useState("");
//   const [salary, setSalary] = useState("");
//   const [type, setType] = useState("");
//   const [message, setMessage] = useState("");

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     const formData = new FormData();
//     formData.append("title", title);
//     formData.append("description", description);
//     formData.append("experience_level", experienceLevel);
//     formData.append("location", location);
//     formData.append("salary", salary);
//     formData.append("type", type);

//     // Log FormData entries
//     for (let pair of formData.entries()) {
//       console.log(pair[0] + ": " + pair[1]);
//     }

//     const token = localStorage.getItem("token");

//     try {
//       const response = await axios.post(
//         "http://localhost:5000/api/post-job",
//         formData,
//         {
//           headers: {
//             "Content-Type": "multipart/form-data",
//             Authorization: `Bearer ${token}`,
//           },
//         }
//       );

//       setMessage("Job posted successfully");
//     } catch (error) {
//       console.error(
//         "Error posting job:",
//         error.response ? error.response.data : error.message
//       );
//       setMessage(
//         "Error posting job: " +
//           (error.response ? error.response.data.message : error.message)
//       );
//     }
//   };

//   return (
//     <div className="flex items-center justify-center flex-col gap-14 py-20">
//       <h1 className="heading text-slate-700 font-semibold capitalize">
//         Post a <span className="text-green-700">Job!</span>
//       </h1>

//       <div className="px-20 w-full">
//         <div className="w-full p-8 border border-gray-200">
//           <p className="text-lg text-gray-600 mb-7">
//             <span className="uppercase text-green-700 text-xl font-semibold mr-1">
//               notice:
//             </span>
//             Fill out the detailed form below to post a job on our platform.
//           </p>

//           <h2 className="text-3xl font-bold text-green-700 mb-6">
//             Job Details
//           </h2>
//           <form onSubmit={handleSubmit} className="space-y-6">
//             {/* Job Title */}
//             <div>
//               <label
//                 htmlFor="jobTitle"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Job Title
//               </label>
//               <input
//                 id="jobTitle"
//                 name="title" // Added name attribute
//                 type="text"
//                 value={title}
//                 onChange={(e) => setTitle(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               />
//             </div>

//             {/* Description */}
//             <div>
//               <label
//                 htmlFor="description"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Description
//               </label>
//               <textarea
//                 id="description"
//                 name="description" // Added name attribute
//                 rows="4"
//                 value={description}
//                 onChange={(e) => setDescription(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               />
//             </div>

//             {/* Experience Level */}
//             <div>
//               <label
//                 htmlFor="experienceLevel"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Experience Level
//               </label>
//               <select
//                 id="experienceLevel"
//                 name="experience_level" // Added name attribute
//                 value={experienceLevel}
//                 onChange={(e) => setExperienceLevel(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               >
//                 <option value="" disabled>
//                   Select experience level
//                 </option>
//                 <option value="Entry">Entry Level</option>
//                 <option value="Mid">Mid Level</option>
//                 <option value="Senior">Senior Level</option>
//               </select>
//             </div>

//             {/* Location */}
//             <div>
//               <label
//                 htmlFor="location"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Location
//               </label>
//               <input
//                 id="location"
//                 name="location" // Added name attribute
//                 type="text"
//                 value={location}
//                 onChange={(e) => setLocation(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               />
//             </div>

//             {/* Salary */}
//             <div>
//               <label
//                 htmlFor="salary"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Salary
//               </label>
//               <input
//                 id="salary"
//                 name="salary" // Added name attribute
//                 type="text"
//                 value={salary}
//                 onChange={(e) => setSalary(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//                 placeholder="e.g., $500 - $1000"
//               />
//             </div>

//             {/* Type */}
//             <div>
//               <label
//                 htmlFor="type"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Job Type
//               </label>
//               <select
//                 id="type"
//                 name="type" // Added name attribute
//                 value={type}
//                 onChange={(e) => setType(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               >
//                 <option value="" disabled>
//                   Select job type
//                 </option>
//                 <option value="Full-time">Full-time</option>
//                 <option value="Part-time">Part-time</option>
//                 <option value="Contract">Contract</option>
//               </select>
//             </div>

//             {/* Submit Button */}
//             <div className="flex justify-center">
//               <button
//                 type="submit"
//                 className="bg-green-600 text-white py-4 px-8 rounded-xl hover:bg-green-700 transition-colors duration-300"
//               >
//                 Post Job
//               </button>
//             </div>
//           </form>

//           {message && (
//             <p className="mt-6 text-center text-green-600">{message}</p>
//           )}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default JobPostingPage;





























import React from 'react';
import axios from 'axios';

const ApplicationActions = ({ applicationId, onStatusChange }) => {
  const handleAccept = async () => {
    try {
      const token = localStorage.getItem('token');
      await axios.put(
        `http://localhost:5000/api/applications/${applicationId}/accept`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      onStatusChange('accepted');
    } catch (error) {
      console.error('Error accepting application:', error);
      alert('Failed to accept application');
    }
  };

  const handleReject = async () => {
    try {
      const token = localStorage.getItem('token');
      await axios.put(
        `http://localhost:5000/api/applications/${applicationId}/reject`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      onStatusChange('rejected');
    } catch (error) {
      console.error('Error rejecting application:', error);
      alert('Failed to reject application');
    }
  };

  return (
    <div className="flex space-x-4">
      <button
        className="bg-green-500 text-white px-4 py-2 rounded"
        onClick={handleAccept}
      >
        Accept
      </button>
      <button
        className="bg-red-500 text-white px-4 py-2 rounded"
        onClick={handleReject}
      >
        Reject
      </button>
    </div>
  );
};

export default ApplicationActions;




























ast-page-builder-template .site-content > .ast-container {
    max-width: 100%;
    padding: 0;
}
@media (min-width: 922px) {
    .site-content .ast-container {
        display: flex;
    }
}
@media (min-width: 1201px) {
    .ast-container {
        max-width: 1240px;
    }
}
@media (min-width: 993px) {
    .ast-container {
        max-width: 1240px;
    }
}
@media (min-width: 922px) {
    .ast-container {
        max-width: 1240px;
    }
}
@media (min-width: 922px) {
    .ast-container {
        max-width: 1240px;
    }
}
@media (min-width: 544px) {
    .ast-container {
        max-width: 100%;
    }
}



















      {/* <li
              onMouseEnter={() => handleMouseEnter("deliverWorks")}
              className="relative"
            >
              <button
                id="dropdownHoverButton"
                className="inline-flex items-center hover:text-green-600"
                type="button"
              >
                Deliver Works
                <svg
                  className="w-2.5 h-2.5 ms-3"
                  aria-hidden="true"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 10 6"
                >
                  <path
                    stroke="currentColor"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2"
                    d="m1 1 4 4 4-4"
                  />
                </svg>
              </button>

              {openDropdown === "deliverWorks" && (
                <div
                  id="dropdownHover"
                  className="z-10 absolute top-11 bg-gray-100 divide-y divide-gray-100 shadow w-48 dark:bg-gray-700"
                >
                  <ul
                    className="py-2 dark:text-gray-200"
                    aria-labelledby="dropdownHoverButton"
                  >
                    <NavLink
                      to="/active-contracts"
                      className="block px-4 py-2 hover:ml-3 transition-all duration-300 hover:text-green-600"
                    >
                      Active Contracts
                    </NavLink>
                    <li>
                      <a
                        href="/by-reviews"
                        className="block px-4 py-2 hover:ml-3 transition-all duration-300 hover:text-green-600"
                      >
                        Contracts History
                      </a>
                    </li>
                  </ul>
                </div>
              )}
            </li> */}








































            // import React, { useState } from "react";
// import axios from "axios";

// const JobPostingPage = () => {
//   const [jobTitle, setJobTitle] = useState("");
//   const [description, setDescription] = useState("");
//   const [experienceLevel, setExperienceLevel] = useState("");
//   const [skills, setSkills] = useState([]);
//   const [skillInput, setSkillInput] = useState("");
//   const [paymentType, setPaymentType] = useState("");
//   const [budget, setBudget] = useState("");
//   const [file, setFile] = useState(null);
//   const [message, setMessage] = useState("");

//   const handleFileChange = (e) => {
//     setFile(e.target.files[0]);
//   };

//   const handleSkillInputChange = (e) => {
//     setSkillInput(e.target.value);
//   };

//   const handleAddSkill = (e) => {
//     e.preventDefault();
//     if (skillInput.trim() && !skills.includes(skillInput.trim())) {
//       setSkills((prevSkills) => [...prevSkills, skillInput.trim()]);
//       setSkillInput("");
//     }
//   };

//   const handleRemoveSkill = (skillToRemove) => {
//     setSkills((prevSkills) =>
//       prevSkills.filter((skill) => skill !== skillToRemove)
//     );
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     // Form data preparation
//     const formData = new FormData();
//     formData.append("title", jobTitle);
//     formData.append("description", description);
//     formData.append("experience_level", experienceLevel);
//     formData.append("skills", skills.join(", "));
//     formData.append("paymentType", paymentType);
//     formData.append("budget", budget);
//     if (file) {
//       formData.append("file", file);
//     }

//     try {
//       // Make the POST request to your backend
//       const response = await axios.post(
//         "http://localhost:5000/api/post-job",
//         formData,
//         {
//           headers: {
//             "Content-Type": "multipart/form-data",
//           },
//         }
//       );

//       // Reset form and show success message
//       setMessage("Job posted successfully!");
//       setJobTitle("");
//       setDescription("");
//       setExperienceLevel("");
//       setSkills([]);
//       setPaymentType("");
//       setBudget("");
//       setFile(null);
//     } catch (error) {
//       console.error("Error posting job:", error);
//       setMessage("Error posting job. Please try again.");
//     }
//   };

//   return (
//     <div className="flex items-center justify-center flex-col gap-14 py-20">
//       <h1 className="heading text-slate-700 font-semibold capitalize">
//         Post a <span className="text-green-700">Job!</span>
//       </h1>

//       <div className="px-20 w-full">
//         <div className="w-full p-8 border border-gray-200">
//           <p className="text-lg text-gray-600 mb-7">
//             <span className="uppercase text-green-700 text-xl font-semibold mr-1">
//               notice:
//             </span>
//             Fill out the detailed form below to post a job on our platform.
//           </p>

//           <h2 className="text-3xl font-bold text-green-700 mb-6">
//             Job Details
//           </h2>
//           <form onSubmit={handleSubmit} className="space-y-6">
//             {/* Job Title */}
//             <div>
//               <label
//                 htmlFor="jobTitle"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Job Title
//               </label>
//               <input
//                 id="jobTitle"
//                 type="text"
//                 value={jobTitle}
//                 onChange={(e) => setJobTitle(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               />
//             </div>

//             {/* Description */}
//             <div>
//               <label
//                 htmlFor="description"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Description
//               </label>
//               <textarea
//                 id="description"
//                 rows="4"
//                 value={description}
//                 onChange={(e) => setDescription(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               />
//             </div>

//             {/* Experience Level */}
//             <div>
//               <label
//                 htmlFor="experienceLevel"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Experience Level
//               </label>
//               <select
//                 id="experienceLevel"
//                 value={experienceLevel}
//                 onChange={(e) => setExperienceLevel(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               >
//                 <option value="" disabled>
//                   Select experience level
//                 </option>
//                 <option value="Entry">Entry Level</option>
//                 <option value="Mid">Mid Level</option>
//                 <option value="Senior">Senior Level</option>
//               </select>
//             </div>

//             {/* Skills Required */}
//             <div>
//               <label
//                 htmlFor="skills"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Skills Required
//               </label>

//               <div className="flex gap-2 items-center mb-4">
//                 <input
//                   id="skillInput"
//                   type="text"
//                   value={skillInput}
//                   onChange={handleSkillInputChange}
//                   placeholder="Add a skill"
//                   className="flex-1 border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//                 />
//                 <button
//                   type="button"
//                   onClick={handleAddSkill}
//                   className="bg-green-600 text-white py-2 px-4 rounded-xl hover:bg-green-700 transition-colors duration-300"
//                 >
//                   Add
//                 </button>
//               </div>

//               <div className="flex flex-wrap gap-2 mb-6">
//                 {skills.map((skill) => (
//                   <span
//                     key={skill}
//                     className="bg-green-200 text-green-800 text-base py-1 px-3 rounded-full flex items-center justify-center space-x-2"
//                   >
//                     <span>{skill}</span>
//                     <button
//                       type="button"
//                       onClick={() => handleRemoveSkill(skill)}
//                       className="text-slate-600 hover:text-red-800 text-xl"
//                     >
//                       &times;
//                     </button>
//                   </span>
//                 ))}
//               </div>
//             </div>

//             {/* Payment Type */}
//             <div>
//               <label
//                 htmlFor="paymentType"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Payment Type
//               </label>
//               <select
//                 id="paymentType"
//                 value={paymentType}
//                 onChange={(e) => setPaymentType(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               >
//                 <option value="" disabled>
//                   Select payment type
//                 </option>
//                 <option value="Hourly">Hourly</option>
//                 <option value="Fixed">Fixed</option>
//               </select>
//             </div>

//             {/* Budget */}
//             <div>
//               <label
//                 htmlFor="budget"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Budget
//               </label>
//               <input
//                 id="budget"
//                 type="text"
//                 value={budget}
//                 onChange={(e) => setBudget(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//                 placeholder="e.g., $500 - $1000"
//               />
//             </div>

//             {/* File Upload */}
//             <div>
//               <label
//                 htmlFor="file"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Upload a File or Image
//               </label>
//               <input
//                 id="file"
//                 type="file"
//                 onChange={handleFileChange}
//                 className="w-full border border-gray-300 rounded-xl p-4 bg-gray-50 file:border-0 file:bg-green-600 file:text-white file:py-2 file:px-4 file:rounded-xl hover:file:bg-green-700 transition-colors duration-300"
//               />
//             </div>

//             {/* Submit Button */}
//             <div className="flex justify-center">
//               <button
//                 type="submit"
//                 className="bg-green-600 text-white py-4 px-8 rounded-xl hover:bg-green-700 transition-colors duration-300"
//               >
//                 Post Job
//               </button>
//             </div>
//           </form>

//           {message && (
//             <p className="mt-6 text-center text-green-600">{message}</p>
//           )}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default JobPostingPage;

// import React, { useState } from "react";
// import axios from "axios";

// const JobPostingPage = () => {
//   const [title, setTitle] = useState("");
//   const [description, setDescription] = useState("");
//   const [experienceLevel, setExperienceLevel] = useState("");
//   const [location, setLocation] = useState("");
//   const [salary, setSalary] = useState("");
//   const [type, setType] = useState("");
//   const [message, setMessage] = useState("");

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     const formData = new FormData();
//     formData.append("title", title);
//     formData.append("description", description);
//     formData.append("experience_level", experienceLevel);
//     formData.append("location", location);
//     formData.append("salary", salary);
//     formData.append("type", type);

//     // Log FormData entries
//     for (let pair of formData.entries()) {
//       console.log(pair[0] + ": " + pair[1]);
//     }

//     const token = localStorage.getItem("token");

//     try {
//       const response = await axios.post(
//         "http://localhost:5000/api/post-job",
//         formData,
//         {
//           headers: {
//             "Content-Type": "multipart/form-data",
//             Authorization: `Bearer ${token}`,
//           },
//         }
//       );

//       setMessage("Job posted successfully");
//     } catch (error) {
//       console.error(
//         "Error posting job:",
//         error.response ? error.response.data : error.message
//       );
//       setMessage(
//         "Error posting job: " +
//           (error.response ? error.response.data.message : error.message)
//       );
//     }
//   };

//   return (
//     <div className="flex items-center justify-center flex-col gap-14 py-20">
//       <h1 className="heading text-slate-700 font-semibold capitalize">
//         Post a <span className="text-green-700">Job!</span>
//       </h1>

//       <div className="px-20 w-full">
//         <div className="w-full p-8 border border-gray-200">
//           <p className="text-lg text-gray-600 mb-7">
//             <span className="uppercase text-green-700 text-xl font-semibold mr-1">
//               notice:
//             </span>
//             Fill out the detailed form below to post a job on our platform.
//           </p>

//           <h2 className="text-3xl font-bold text-green-700 mb-6">
//             Job Details
//           </h2>
//           <form onSubmit={handleSubmit} className="space-y-6">
//             {/* Job Title */}
//             <div>
//               <label
//                 htmlFor="jobTitle"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Job Title
//               </label>
//               <input
//                 id="jobTitle"
//                 name="title" // Added name attribute
//                 type="text"
//                 value={title}
//                 onChange={(e) => setTitle(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               />
//             </div>

//             {/* Description */}
//             <div>
//               <label
//                 htmlFor="description"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Description
//               </label>
//               <textarea
//                 id="description"
//                 name="description" // Added name attribute
//                 rows="4"
//                 value={description}
//                 onChange={(e) => setDescription(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               />
//             </div>

//             {/* Experience Level */}
//             <div>
//               <label
//                 htmlFor="experienceLevel"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Experience Level
//               </label>
//               <select
//                 id="experienceLevel"
//                 name="experience_level" // Added name attribute
//                 value={experienceLevel}
//                 onChange={(e) => setExperienceLevel(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               >
//                 <option value="" disabled>
//                   Select experience level
//                 </option>
//                 <option value="Entry">Entry Level</option>
//                 <option value="Mid">Mid Level</option>
//                 <option value="Senior">Senior Level</option>
//               </select>
//             </div>

//             {/* Location */}
//             <div>
//               <label
//                 htmlFor="location"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Location
//               </label>
//               <input
//                 id="location"
//                 name="location" // Added name attribute
//                 type="text"
//                 value={location}
//                 onChange={(e) => setLocation(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               />
//             </div>

//             {/* Salary */}
//             <div>
//               <label
//                 htmlFor="salary"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Salary
//               </label>
//               <input
//                 id="salary"
//                 name="salary" // Added name attribute
//                 type="text"
//                 value={salary}
//                 onChange={(e) => setSalary(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//                 placeholder="e.g., $500 - $1000"
//               />
//             </div>

//             {/* Type */}
//             <div>
//               <label
//                 htmlFor="type"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Job Type
//               </label>
//               <select
//                 id="type"
//                 name="type" // Added name attribute
//                 value={type}
//                 onChange={(e) => setType(e.target.value)}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               >
//                 <option value="" disabled>
//                   Select job type
//                 </option>
//                 <option value="Full-time">Full-time</option>
//                 <option value="Part-time">Part-time</option>
//                 <option value="Contract">Contract</option>
//               </select>
//             </div>

//             {/* Submit Button */}
//             <div className="flex justify-center">
//               <button
//                 type="submit"
//                 className="bg-green-600 text-white py-4 px-8 rounded-xl hover:bg-green-700 transition-colors duration-300"
//               >
//                 Post Job
//               </button>
//             </div>
//           </form>

//           {message && (
//             <p className="mt-6 text-center text-green-600">{message}</p>
//           )}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default JobPostingPage;














































// import React, { useEffect, useState } from "react";
// import axios from "axios";

// const ThreadList = () => {
//   const [threads, setThreads] = useState([]);
//   const [replyContent, setReplyContent] = useState({});
//   const [likedThreads, setLikedThreads] = useState({});
//   const [expandedReplies, setExpandedReplies] = useState({});

//   useEffect(() => {
//     const fetchThreads = async () => {
//       const token = localStorage.getItem("token");
//       try {
//         const res = await axios.get(
//           "http://localhost:5000/api/community/threads",
//           {
//             headers: { Authorization: `Bearer ${token}` },
//           }
//         );
//         setThreads(res.data);
//       } catch (error) {
//         console.error("Error fetching threads:", error);
//       }
//     };

//     fetchThreads();
//   }, []);

//   const handleLikeThread = async (threadId) => {
//     const token = localStorage.getItem("token");
//     try {
//       await axios.post(
//         `http://localhost:5000/api/community/like/${threadId}`,
//         {},
//         {
//           headers: { Authorization: `Bearer ${token}` },
//         }
//       );
//       setLikedThreads((prev) => ({ ...prev, [threadId]: true }));
//       alert("Thread liked!");
//     } catch (error) {
//       console.error("Error liking thread:", error);
//     }
//   };

//   const handleReply = async (threadId) => {
//     const token = localStorage.getItem("token");
//     const content = replyContent[threadId] || "";
//     if (!content) return alert("Reply content cannot be empty!");

//     try {
//       await axios.post(
//         `http://localhost:5000/api/community/reply/${threadId}`,
//         { content },
//         {
//           headers: { Authorization: `Bearer ${token}` },
//         }
//       );
//       alert("Reply posted successfully!");
//       setReplyContent((prev) => ({ ...prev, [threadId]: "" }));
//     } catch (error) {
//       console.error("Error posting reply:", error);
//     }
//   };

//   const toggleReplies = async (threadId) => {
//     setExpandedReplies((prev) => ({ ...prev, [threadId]: !prev[threadId] }));

//     // If expanding, fetch replies for the thread
//     if (!expandedReplies[threadId]) {
//       const token = localStorage.getItem("token");
//       try {
//         const res = await axios.get(
//           `http://localhost:5000/api/community/thread/${threadId}`,
//           {
//             headers: { Authorization: `Bearer ${token}` },
//           }
//         );

//         const updatedThreads = threads.map((thread) =>
//           thread.id === threadId
//             ? { ...thread, replies: res.data.replies }
//             : thread
//         );
//         setThreads(updatedThreads);
//       } catch (error) {
//         console.error("Error fetching replies:", error);
//       }
//     }
//   };

//   return (
//     <div className="px-10 py-20 w-full">
//       <h1 className="text-3xl font-bold mb-6 text-center">Community Threads</h1>
//       {threads.length > 0 ? (
//         threads.map((thread) => (
//           <div
//             key={thread.id}
//             className="bg-white border border-gray-300 rounded-lg p-4 mb-4 shadow-lg hover:shadow-xl transition"
//           >
//             <h2 className="text-xl font-semibold text-blue-600">
//               {thread.title}
//             </h2>
//             <p className="text-gray-500">Posted by: {thread.username}</p>
//             <div className="flex items-center justify-between mt-2">
//               <button
//                 onClick={() => handleLikeThread(thread.id)}
//                 className={`px-3 py-1 rounded bg-blue-500 text-white hover:bg-blue-600 transition ${
//                   likedThreads[thread.id] ? "opacity-50 cursor-not-allowed" : ""
//                 }`}
//                 disabled={likedThreads[thread.id]}
//               >
//                 {likedThreads[thread.id] ? "Liked" : "Like"}{" "}
//                 {thread.likes ? `(${thread.likes})` : ""}
//               </button>
//               <button
//                 onClick={() => toggleReplies(thread.id)}
//                 className="text-blue-500 hover:underline"
//               >
//                 {expandedReplies[thread.id] ? "Hide Replies" : "Show Replies"}
//               </button>
//             </div>

//             {/* Show Replies */}
//             {expandedReplies[thread.id] && (
//               <div className="mt-4 border-t border-gray-200 pt-4">
//                 {thread.replies && thread.replies.length > 0 ? (
//                   <>
//                     <h3 className="font-bold text-lg">Replies:</h3>
//                     {thread.replies.map((reply) => (
//                       <div
//                         key={reply.id}
//                         className="border-b border-gray-200 py-2"
//                       >
//                         <p className="text-gray-700">{reply.content}</p>
//                         <p className="text-gray-500 text-sm">
//                           By: {reply.username}
//                         </p>
//                       </div>
//                     ))}
//                     {thread.replies.length > 3 &&
//                       !expandedReplies[thread.id] && (
//                         <button
//                           onClick={() =>
//                             setExpandedReplies((prev) => ({
//                               ...prev,
//                               [thread.id]: true,
//                             }))
//                           }
//                           className="mt-2 text-blue-500 hover:underline"
//                         >
//                           Show All Replies
//                         </button>
//                       )}
//                   </>
//                 ) : (
//                   <p>No replies yet.</p>
//                 )}
//               </div>
//             )}

//             {/* Reply Input */}
//             <div className="mt-4">
//               <input
//                 type="text"
//                 placeholder="Your reply..."
//                 value={replyContent[thread.id] || ""}
//                 onChange={(e) =>
//                   setReplyContent((prev) => ({
//                     ...prev,
//                     [thread.id]: e.target.value,
//                   }))
//                 }
//                 className="border rounded p-2 w-full mt-2"
//               />
//               <button
//                 onClick={() => handleReply(thread.id)}
//                 className="mt-2 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition"
//               >
//                 Post Reply
//               </button>
//             </div>
//           </div>
//         ))
//       ) : (
//         <p>No threads available</p>
//       )}
//     </div>
//   );
// };

// export default ThreadList;















// import img from "/assets/image (1).png";

// export default function Hero() {
//   return (
//     <section className="flex items-center justify-center pt-16 gap-14 min-h-screen">
//       <div className="">
//         <h1 className="text-5xl font-bold mb-4 capitalize">
//           Find your <span className="text-green-700 ">Ideal work</span>
//           <span className="block">
//             that fits your Lifestyle
//             <span className="text-green-700 text-7xl">.</span>
//           </span>
//           {/* "Find Your Ideal Job That Matches Your Lifestyle." */}
//           {/* Discover the Perfect Job That Complements Your Life */}
//         </h1>

//         <p className="text-lg font-medium text-slate-500 mb-12">
//           Discover the perfect job that aligns with your skills and preferences.
//           Our platform connects you with opportunities that match your
//           professional goals and personal needs. From flexible hours to remote
//           work options, we help you find a role that fits seamlessly into your
//           life.
//         </p>

//         <div className="mb-10">
//           <div className="flex  items-center w-full mb-3">
//             <div className="flex items-center bg-slate-200 rounded-full overflow-hidden">
//               <input
//                 type="text"
//                 className="flex-1 px-5 py-2 text-base bg-transparent text-gray-700 focus:outline-none"
//                 placeholder="Enter job title, keywords..."
//               />

//               <span className="w-px h-10 bg-gray-300"></span>

//               <input
//                 type="text"
//                 className="flex-1 px-5 py-2 text-base bg-transparent text-gray-700 focus:outline-none"
//                 placeholder="Enter location..."
//               />

//               <button className="bg-green-700 hover:bg-green-800 text-white px-6 py-3 rounded-full focus:outline-none flex items-center justify-center">
//                 <svg
//                   className="w-7 h-7 text-white"
//                   xmlns="http://www.w3.org/2000/svg"
//                   fill="none"
//                   viewBox="0 0 24 24"
//                   stroke="currentColor"
//                 >
//                   <path
//                     strokeLinecap="round"
//                     strokeLinejoin="round"
//                     strokeWidth="2"
//                     d="M11 4a7 7 0 015.88 11.29l4.12 4.13a1 1 0 01-1.42 1.42l-4.13-4.12A7 7 0 1111 4z"
//                   />
//                 </svg>
//               </button>
//             </div>
//           </div>
//           <p className="text-base text-slate-500">
//             Popular Searches:{" "}
//             <span className="font-medium">
//               Web developer, designer, Manager
//             </span>
//           </p>
//         </div>

//         <div>
//           <p>Trusted by Google, GitHub, Paypal</p>
//         </div>
//       </div>

//       <div
//         className="border-r-2 border-b-2 border-green-600 p-5 "
//         style={{ width: "1000px" }}
//       >
//         <img src={img} alt="" className="object-cover" />
//       </div>
//     </section>
//   );
// }



















import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchUserData } from "../../Store/auth/authSlice";
import { FaEdit, FaSignOutAlt } from "react-icons/fa";
import axios from "axios";
import { jwtDecode } from "jwt-decode";
import ProfileHeader from "./ProfileHeader";

const AccountPage = () => {
  const dispatch = useDispatch();
  const { user, loading, error } = useSelector((state) => state.auth);
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    profile_description: "",
    location: "",
  });
  const [jobApplications, setJobApplications] = useState([]);
  const [jobOffers, setJobOffers] = useState([]);
  const [showApps, setShowApps] = useState(false);
  const [selectedJob, setSelectedJob] = useState(null);
  const [eachJobApplications, setEachJobApplications] = useState([]);
  const [role, setRole] = useState("");

  useEffect(() => {
    const token = localStorage.getItem("token");

    if (token) {
      const decodedToken = jwtDecode(token);
      const userRole = decodedToken.role;
      setRole(userRole);

      // console.log("User role:", userRole);
    } else {
      console.log("No token found in localStorage.");
    }
  }, []);

  useEffect(() => {
    dispatch(fetchUserData());
  }, [dispatch]);

  useEffect(() => {
    if (user) {
      setFormData({
        username: user.username || "",
        email: user.email || "",
        profile_description: user.profile_description || "",
        location: user.location || "",
      });
    }
  }, [user]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleProfileUpdate = async () => {
    try {
      const token = localStorage.getItem("token");
      const response = await axios.put(
        "http://localhost:5000/api/user/account/update",
        formData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      alert("Profile updated successfully!");
      dispatch(fetchUserData());
      setIsEditing(false);
    } catch (error) {
      console.error("Error updating profile:", error);
    }
  };

  // const handleSeeJobApplicationsByThisUser = async () => {
  //   try {
  //     const token = localStorage.getItem("token");
  //     const response = await axios.get(
  //       "http://localhost:5000/api/user/account/job-applications",
  //       {
  //         headers: {
  //           Authorization: `Bearer ${token}`,
  //         },
  //       }
  //     );

  //     setJobApplications(response.data || []);
  //   } catch (error) {
  //     console.error("Error fetching job applications:", error);
  //   }
  // };

  // const handleSeeJobOffersByThisUser = async () => {
  //   try {
  //     const token = localStorage.getItem("token");
  //     const response = await axios.get(
  //       "http://localhost:5000/api/user/account/job-offers",
  //       {
  //         headers: {
  //           Authorization: `Bearer ${token}`,
  //         },
  //       }
  //     );

  //     setJobOffers(response.data || []);
  //   } catch (error) {
  //     console.error("Error fetching job offers:", error);
  //   }
  // };

  // const handleSeeMyJobsApplications = async (jobId) => {
  //   try {
  //     const token = localStorage.getItem("token");
  //     const response = await axios.get(
  //       `http://localhost:5000/api/jobs/${jobId}/applications`,
  //       {
  //         headers: {
  //           Authorization: `Bearer ${token}`,
  //         },
  //       }
  //     );

  //     setSelectedJob(jobId);
  //     setEachJobApplications(response.data.applications || []);
  //     setShowApps(true);
  //   } catch (error) {
  //     console.error("Error fetching job applications:", error);
  //   }
  // };

  const handleSeeJobApplicationsByThisUser = async () => {
    if (role !== "Applicant") {
      // console.error("Only applicants can view job applications.");
      return;
    }

    try {
      const token = localStorage.getItem("token");
      const response = await axios.get(
        "http://localhost:5000/api/user/account/job-applications",
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      setJobApplications(response.data || []);
    } catch (error) {
      console.error("Error fetching job applications:", error);
    }
  };

  const handleSeeJobOffersByThisUser = async () => {
    if (role !== "Client") {
      // console.error("Only clients can view job offers.");
      return;
    }

    try {
      const token = localStorage.getItem("token");
      const response = await axios.get(
        "http://localhost:5000/api/user/account/job-offers",
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      setJobOffers(response.data || []);
    } catch (error) {
      console.error("Error fetching job offers:", error);
    }
  };

  const handleSeeMyJobsApplications = async (jobId) => {
    if (role !== "Client") {
      // console.error("Only clients can view job applications for a job.");
      return;
    }

    try {
      const token = localStorage.getItem("token");
      const response = await axios.get(
        `http://localhost:5000/api/jobs/${jobId}/applications`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      setSelectedJob(jobId);
      setEachJobApplications(response.data.applications || []);
      setShowApps(true);
    } catch (error) {
      console.error("Error fetching job applications:", error);
    }
  };

  useEffect(() => {
    if (user) {
      handleSeeJobApplicationsByThisUser();
      handleSeeJobOffersByThisUser();
    }
  }, [user]);

  const handleAcceptApplication = async (applicationId) => {
    try {
      const token = localStorage.getItem("token");
      const response = await axios.put(
        `http://localhost:5000/api/applications/${applicationId}/accept`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      alert("Application accepted successfully!");
      // Re-fetch the applications to reflect the updated status
      handleSeeJobApplicationsByThisUser();
    } catch (error) {
      console.error("Error accepting application:", error);
      alert("There was an error accepting the application.");
    }
  };

  const handleRejectApplication = async (applicationId) => {
    try {
      const token = localStorage.getItem("token");
      const response = await axios.put(
        `http://localhost:5000/api/applications/${applicationId}/reject`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      alert("Application rejected successfully!");
      // Re-fetch the applications to reflect the updated status
      handleSeeJobApplicationsByThisUser();
    } catch (error) {
      console.error("Error rejecting application:", error);
      alert("There was an error rejecting the application.");
    }
  };

  if (loading)
    return <p className="text-center text-blue-500 text-xl">Loading...</p>;
  if (error) return <p className="text-center text-red-500 text-xl">{error}</p>;
  if (!user)
    return (
      <p className="text-center text-gray-600 text-xl">
        No user data available
      </p>
    );

  return (
    <div className="min-h-screen py-20">
      <div className="">
        {/* Profile Header */}
        <ProfileHeader user={user} />
        {/* <div className="flex items-center lg:flex-row flex-col gap-7 rounded-lg bg-gradient-to-r from-green-800 via-green-600 to-green-500 text-white p-6 lg:p-12">
          <img
            className="w-32 h-32 rounded-full object-cover border-4 border-white"
            src="/path/to/profile-image.jpg"
            alt="Profile"
          />
          <div className="">
            <h1 className="text-2xl lg:text-4xl font-extrabold">
              {user.username}
            </h1>
            <p className="text-base lg:text-xl mt-2">
              {user.profile_description}
            </p>
            <p className="text-xs lg:text-sm mt-2 capitalize">
              {user.location}
            </p>
          </div>
        </div> */}

        {/* Content Sections */}
        <div className="py-4 lg:p-8">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div className="bg-white p-8 rounded-lg shadow-lg border border-gray-200">
              <h2 className="text-2xl font-bold text-gray-800 mb-6">
                {isEditing ? "Edit Profile" : "User Details"}
              </h2>
              {isEditing ? (
                <div>
                  <input
                    type="text"
                    name="username"
                    value={formData.username}
                    onChange={handleInputChange}
                    className="w-full mb-4 p-2 border border-gray-300 rounded"
                    placeholder="Username"
                  />
                  <input
                    type="email"
                    name="email"
                    value={formData.email}
                    onChange={handleInputChange}
                    className="w-full mb-4 p-2 border border-gray-300 rounded"
                    placeholder="Email"
                  />
                  <input
                    type="text"
                    name="profile_description"
                    value={formData.profile_description}
                    onChange={handleInputChange}
                    className="w-full mb-4 p-2 border border-gray-300 rounded"
                    placeholder="Profile Description"
                  />
                  <input
                    type="text"
                    name="location"
                    value={formData.location}
                    onChange={handleInputChange}
                    className="w-full mb-4 p-2 border border-gray-300 rounded"
                    placeholder="Location"
                  />
                </div>
              ) : (
                <div>
                  <p className="text-gray-600 mb-4">
                    <span className="font-medium">Username:</span>{" "}
                    {user.username}
                  </p>
                  <p className="text-gray-600 mb-4">
                    <span className="font-medium">Email:</span> {user.email}
                  </p>
                  <p className="text-gray-600 mb-4">
                    <span className="font-medium">Description:</span>{" "}
                    {user.profile_description}
                  </p>
                  <p className="text-gray-600">
                    <span className="font-medium">Location:</span>{" "}
                    {user.location}
                  </p>
                </div>
              )}
            </div>
          </div>

          {jobApplications && jobApplications.length > 0 ? (
            <div className="mt-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-6">
                My Job Applications
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {jobApplications.map((app) => (
                  <div
                    key={app.id}
                    className="bg-white shadow-md rounded-lg p-6 border border-gray-200 hover:shadow-lg transition-shadow duration-300 ease-in-out"
                  >
                    <h3 className="text-lg font-semibold text-green-700 mb-2">
                      {app.title}
                    </h3>
                    <p className="text-gray-700 mb-1">
                      <span className="font-medium">Status:</span> {app.status}
                    </p>
                    <p className="text-gray-700 mb-1">
                      <span className="font-medium">Applied On:</span>{" "}
                      {new Date(app.created_at).toLocaleDateString()}
                    </p>
                    <p className="text-gray-700 mb-4">
                      <span className="font-medium">Cover Letter:</span>{" "}
                      {app.cover_letter}
                    </p>
                    <button className="text-sm text-white bg-green-700 px-4 py-2 rounded hover:bg-green-800 transition duration-300">
                      View Details
                    </button>
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <p className="text-center text-gray-500">
              No job applications found.
            </p>
          )}

          {jobOffers && jobOffers.length > 0 ? (
            <div className="mt-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-6">
                Job Offers
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {jobOffers.map((job) => (
                  <div
                    key={job.id}
                    className="bg-white shadow-md rounded-lg p-6 border border-gray-200 hover:shadow-lg transition-shadow duration-300 ease-in-out"
                  >
                    <h3 className="text-lg font-semibold text-green-700 mb-2">
                      {job.title}
                    </h3>
                    <p className="text-gray-700 mb-1">
                      <span className="font-medium">Status:</span> {job.status}
                    </p>
                    <p className="text-gray-700 mb-1">
                      <span className="font-medium">Offered On:</span>{" "}
                      {new Date(job.created_at).toLocaleDateString()}
                    </p>
                    <p className="text-gray-700 mb-4">
                      <span className="font-medium">Salary:</span> {job.salary}
                    </p>
                    <button
                      onClick={() => handleSeeMyJobsApplications(job.id)}
                      className="text-sm text-white bg-green-700 px-4 py-2 rounded hover:bg-green-800 transition duration-300"
                    >
                      View Details
                    </button>
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <p className="text-center text-gray-500">
              No job applications found.
            </p>
          )}
        </div>

        {showApps && (
          <div className="mt-12">
            <h2 className="text-2xl font-bold text-gray-800 mb-6">
              Applications for Job {selectedJob}
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {eachJobApplications.length > 0 ? (
                eachJobApplications.map((application) => (
                  <div
                    key={application.id}
                    className="bg-white shadow-md rounded-lg p-6 border border-gray-200 hover:shadow-lg transition-shadow duration-300 ease-in-out"
                  >
                    <h3 className="text-lg font-semibold text-blue-600 mb-2">
                      Applicant: {application.applicant_name}
                    </h3>
                    <p className="text-gray-700 mb-1">
                      <span className="font-medium">Status:</span>{" "}
                      {application.status}
                    </p>
                    <p className="text-gray-700 mb-1">
                      <span className="font-medium">Applied On:</span>{" "}
                      {new Date(application.created_at).toLocaleDateString()}
                    </p>
                    <p className="text-gray-700 mb-1">
                      <span className="font-medium">Cover Letter:</span>{" "}
                      {application.cover_letter}
                    </p>
                    <p className="text-gray-700 mb-1">
                      <span className="font-medium">GitHub Link:</span>{" "}
                      {application.github_link}
                    </p>

                    <p className="text-gray-700 mb-1">
                      <span className="font-medium">Rate Increase:</span>{" "}
                      {application.rate_increase}
                    </p>

                    <p className="text-gray-700 mb-2">
                      <span className="font-medium">Payment Suggestion:</span>{" "}
                      {application.payment_suggestion}
                    </p>

                    <p className="mb-4">
                      <a
                        href={`http://localhost:5000/${application.cv_path}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-lg text-green-700 font-medium underline"
                      >
                        View CV
                      </a>
                    </p>

                    <div className="flex gap-4">
                      <button
                        onClick={() => handleAcceptApplication(application.id)}
                        className="text-sm text-white bg-green-500 px-4 py-2 rounded hover:bg-green-600 transition duration-300"
                      >
                        Accept
                      </button>
                      <button
                        onClick={() => handleRejectApplication(application.id)}
                        className="text-sm text-white bg-red-500 px-4 py-2 rounded hover:bg-red-600 transition duration-300"
                      >
                        Reject
                      </button>
                    </div>
                  </div>
                ))
              ) : (
                <p className="text-center text-gray-500">
                  No applications found for this job.
                </p>
              )}
            </div>
          </div>
        )}

        {/* Actions Section */}
        <div className="bg-gray-50 px-0 py-6 lg:p-6 border-t border-gray-200">
          <div className="flex justify-end space-x-4">
            {isEditing ? (
              <>
                <button
                  className="flex items-center bg-blue-500 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-blue-600 transition duration-300 ease-in-out"
                  onClick={handleProfileUpdate}
                >
                  Save Changes
                </button>
                <button
                  className="flex items-center bg-gray-500 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-gray-600 transition duration-300 ease-in-out"
                  onClick={() => setIsEditing(false)}
                >
                  Cancel
                </button>
              </>
            ) : (
              <>
                <button
                  className="flex items-center bg-green-700 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-green-600 transition duration-300 ease-in-out"
                  onClick={() => setIsEditing(true)}
                >
                  <FaEdit className="mr-2" /> Edit Profile
                </button>
                <button
                  className="flex items-center bg-red-600 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-red-600 transition duration-300 ease-in-out"
                  onClick={() => alert("Logout functionality here")}
                >
                  <FaSignOutAlt className="mr-2" /> Logout
                </button>
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AccountPage;

























// import React, { useState, useEffect } from "react";
// import JobDetailPage from "../Job Detail Page/JobDetailPage";
// import JobCard from "../Job cards/JobCard";
// import { useDispatch, useSelector } from "react-redux";
// import { fetchJobOffers } from "../../Store/actions/jobsActions";
// import axiosInstance from "../../Config/axiosConfig";

// const LatestJobs = () => {
//   const [selectedJob, setSelectedJob] = useState(null);
//   const [isDetailOpen, setIsDetailOpen] = useState(false);
//   const [searchQuery, setSearchQuery] = useState("");
//   const [locationQuery, setLocationQuery] = useState("");
//   const [saveStatus, setSaveStatus] = useState(null); // To track save status

//   const dispatch = useDispatch();

//   const jobsData = useSelector((state) => state.jobOffersReducer);

//   // Fetch jobs whenever either searchQuery or locationQuery changes
//   useEffect(() => {
//     dispatch(fetchJobOffers({ search: searchQuery, location: locationQuery }));
//   }, [dispatch, searchQuery, locationQuery]);

// const handleJobClick = (job) => {
//   setSelectedJob(job);
//   setIsDetailOpen(true);
// };

// const handleCloseDetail = () => {
//   setIsDetailOpen(false);
//   setSelectedJob(null);
// };

//   const handleSearchChange = (e) => {
//     setSearchQuery(e.target.value);
//   };

//   const handleLocationChange = (e) => {
//     setLocationQuery(e.target.value);
//   };

// const handleSaveJob = async (jobId) => {
//   try {
//     const response = await axiosInstance.post("/save-job", { jobId });

//     setSaveStatus({
//       message: response.data.message,
//       success: true,
//     });
//   } catch (error) {
//     const errorMessage =
//       error.response && error.response.data.error
//         ? error.response.data.error
//         : "Failed to save the job.";
//     setSaveStatus({
//       message: errorMessage,
//       success: false,
//     });
//   }
// };

//   return (
//     <section className="flex flex-col items-center justify-center gap-14 py-20">
//       <h1 className="heading text-slate-700 font-semibold capitalize">
//         explore <span className="text-green-700">jobs</span>
//       </h1>

//       <>
//         {/* Search and Filter Inputs with Advanced Design */}
//         <div className="flex items-center w-full max-w-3xl">
//           <div className="flex items-center bg-slate-200 rounded-full overflow-hidden w-full">
//             {/* Search Input */}
//             <input
//               type="text"
//               className="flex-1 px-5 py-3 text-base bg-transparent text-gray-700 focus:outline-none"
//               placeholder="Enter job title, keywords..."
//               value={searchQuery}
//               onChange={handleSearchChange} // Handle search input changes
//             />

//             {/* Divider */}
//             <span className="w-px h-10 bg-gray-300"></span>

//             {/* Location Input */}
//             <input
//               type="text"
//               className="flex-1 px-5 py-3 text-base bg-transparent text-gray-700 focus:outline-none"
//               placeholder="Enter location..."
//               value={locationQuery}
//               onChange={handleLocationChange} // Handle location input changes
//             />

//             {/* Search Button */}
//             <button className="bg-green-700 hover:bg-green-800 text-white px-6 py-3 rounded-full focus:outline-none flex items-center justify-center">
//               <svg
//                 className="w-7 h-7 text-white"
//                 xmlns="http://www.w3.org/2000/svg"
//                 fill="none"
//                 viewBox="0 0 24 24"
//                 stroke="currentColor"
//               >
//                 <path
//                   strokeLinecap="round"
//                   strokeLinejoin="round"
//                   strokeWidth="2"
//                   d="M11 4a7 7 0 015.88 11.29l4.12 4.13a1 1 0 01-1.42 1.42l-4.13-4.12A7 7 0 1111 4z"
//                 />
//               </svg>
//             </button>
//           </div>
//         </div>

//         {/* Jobs Listing */}
//         <div className="grid grid-cols-1 lg:grid-cols-4 w-full max-w-8xl gap-8">
//           <div className="lg:col-span-3">
//             {jobsData.jobOffers && jobsData.jobOffers.length > 0 ? (
//               jobsData.jobOffers.map((job) => (
//                 <JobCard
//                   job={job}
//                   handleJobClick={handleJobClick}
//                   key={job.id}
//                   handleSaveJob={() => handleSaveJob(job.id)} // Save job on click
//                 />
//               ))
//             ) : (
//               <p className="text-center text-gray-500">No jobs found</p>
//             )}
//           </div>

//           <div className="">
//             <p className="text-gray-700"></p>
//           </div>
//         </div>
//       </>

//       {saveStatus && (
//         <div
//           className={`${
//             saveStatus.success ? "text-green-600" : "text-red-600"
//           }`}
//         >
//           {saveStatus.message}
//         </div>
//       )}

//       <JobDetailPage
//         job={selectedJob}
//         isOpen={isDetailOpen}
//         onClose={handleCloseDetail}
//       />
//     </section>
//   );
// };

// export default LatestJobs;



























// import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
// import axios from "axios";
// import { jwtDecode } from "jwt-decode";

// // Async Thunk for login
// export const loginUser = createAsyncThunk(
//   "auth/loginUser",
//   async (formData, { rejectWithValue }) => {
//     try {
//       const response = await axios.post(
//         "http://localhost:5000/api/auth/login",
//         formData
//       );

//       const token = response.data.token;
//       localStorage.setItem("token", token);
//       return response.data;
//     } catch (error) {
//       return rejectWithValue(error.response?.data?.message || "Login failed");
//     }
//   }
// );

// // Async Thunk for signup
// export const signupUser = createAsyncThunk(
//   "auth/signupUser",
//   async (formData, { rejectWithValue }) => {
//     try {
//       const response = await axios.post(
//         "http://localhost:5000/api/auth/register",
//         formData
//       );
//       return response.data;
//     } catch (error) {
//       return rejectWithValue(error.response?.data?.message || "Signup failed");
//     }
//   }
// );

// // Async Thunk for fetching user data
// export const fetchUserData = createAsyncThunk(
//   "auth/fetchUserData",
//   async (_, { getState, rejectWithValue }) => {
//     const state = getState();
//     const token = state.auth.token;

//     // Check if token is present and valid
//     if (!token || isTokenExpired(token)) {
//       return rejectWithValue("Token expired");
//     }

//     try {
//       const response = await axios.get(
//         "http://localhost:5000/api/user/account",
//         {
//           headers: { Authorization: `Bearer ${token}` },
//         }
//       );
//       return response.data;
//     } catch (error) {
//       console.error("Fetch user data error:", error);
//       return rejectWithValue(
//         error.response?.data?.message || "Failed to fetch user data"
//       );
//     }
//   }
// );

// // Function to check if token is expired
// const isTokenExpired = (token) => {
//   try {
//     const decoded = jwtDecode(token);
//     const currentTime = Date.now() / 1000; // Current time in seconds
//     return decoded.exp < currentTime;
//   } catch (error) {
//     console.error("Error decoding token:", error);
//     return true; // If token can't be decoded, consider it expired
//   }
// };

// const authSlice = createSlice({
//   name: "auth",
//   initialState: {
//     user: null,
//     token: localStorage.getItem("token") || null,
//     role: null,
//     loading: false,
//     error: null,
//     success: false,
//   },
//   reducers: {
//     logout: (state) => {
//       state.user = null;
//       state.token = null;
//       state.role = null;
//       localStorage.removeItem("token");
//     },
//     checkTokenExpiration: (state) => {
//       const token = localStorage.getItem("token");
//       if (token && isTokenExpired(token)) {
//         state.user = null;
//         state.token = null;
//         state.role = null;
//         localStorage.removeItem("token");
//       }
//     },
//   },
//   extraReducers: (builder) => {
//     builder
//       .addCase(loginUser.pending, (state) => {
//         state.loading = true;
//         state.error = null;
//         state.success = false;
//       })
//       .addCase(loginUser.fulfilled, (state, action) => {
//         state.loading = false;
//         state.token = action.payload.token;
//         state.user = action.payload.user;
//         state.role = action.payload.user.role;
//         state.success = true;
//       })
//       .addCase(loginUser.rejected, (state, action) => {
//         state.loading = false;
//         state.error = action.payload;
//         state.success = false;
//       })
//       .addCase(signupUser.pending, (state) => {
//         state.loading = true;
//         state.error = null;
//         state.success = false;
//       })
//       .addCase(signupUser.fulfilled, (state, action) => {
//         state.loading = false;
//         state.success = true;
//       })
//       .addCase(signupUser.rejected, (state, action) => {
//         state.loading = false;
//         state.error = action.payload;
//         state.success = false;
//       })
//       .addCase(fetchUserData.pending, (state) => {
//         state.loading = true;
//         state.error = null;
//       })
//       .addCase(fetchUserData.fulfilled, (state, action) => {
//         state.loading = false;
//         state.user = action.payload;
//         state.role = action.payload.role;
//         console.log(state.role);
//       })
//       .addCase(fetchUserData.rejected, (state, action) => {
//         state.loading = false;
//         state.error = action.payload;
//       });
//   },
// });

// export const { logout, checkTokenExpiration } = authSlice.actions;
// export default authSlice.reducer;


















































// // import React, { useState } from "react";
// // import { useDispatch, useSelector } from "react-redux";
// // import { signupUser } from "../../Store/auth/authSlice";

// // const Signup = () => {
// //   const [formData, setFormData] = useState({
// //     username: "",
// //     email: "",
// //     password: "",
// //     role: "",
// //     profile_description: "",
// //     location: "",
// //   });

// // const dispatch = useDispatch();
// // const { loading, error, success } = useSelector((state) => state.auth);

// //   const handleChange = (e) => {
// //     setFormData({ ...formData, [e.target.name]: e.target.value });
// //   };

// //   const handleSubmit = (e) => {
// //     e.preventDefault();
// //     dispatch(signupUser(formData));
// //   };

// //   return (
// //     <div className="min-h-screen flex items-center justify-center bg-gray-50">
// //       <form
// //         onSubmit={handleSubmit}
// //         className="w-full max-w-md bg-white p-6 rounded-lg shadow-lg"
// //       >
// //         <h2 className="text-2xl font-bold mb-6">Sign Up</h2>

// //         <input
// //           type="text"
// //           name="username"
// //           placeholder="Username"
// //           value={formData.username}
// //           onChange={handleChange}
// //           className="w-full mb-4 p-2 border rounded"
// //           required
// //         />

// //         <input
// //           type="email"
// //           name="email"
// //           placeholder="Email"
// //           value={formData.email}
// //           onChange={handleChange}
// //           className="w-full mb-4 p-2 border rounded"
// //           required
// //         />

// //         <input
// //           type="password"
// //           name="password"
// //           placeholder="Password"
// //           value={formData.password}
// //           onChange={handleChange}
// //           className="w-full mb-4 p-2 border rounded"
// //           required
// //         />

// //         <input
// //           type="text"
// //           name="role"
// //           placeholder="Role"
// //           value={formData.role}
// //           onChange={handleChange}
// //           className="w-full mb-4 p-2 border rounded"
// //         />

// //         <input
// //           type="text"
// //           name="profile_description"
// //           placeholder="Profile Description"
// //           value={formData.profile_description}
// //           onChange={handleChange}
// //           className="w-full mb-4 p-2 border rounded"
// //         />

// //         <input
// //           type="text"
// //           name="location"
// //           placeholder="Location"
// //           value={formData.location}
// //           onChange={handleChange}
// //           className="w-full mb-4 p-2 border rounded"
// //         />

// //         {error && <p className="text-red-500">{error}</p>}
// //         {success && <p className="text-green-500">Signup successful!</p>}
// //         {loading && <p className="text-blue-500">Signing up...</p>}

// //         <button
// //           type="submit"
// //           className="w-full bg-green-700 text-white py-2 rounded hover:bg-green-800 transition"
// //           disabled={loading}
// //         >
// //           Sign Up
// //         </button>
// //       </form>
// //     </div>
// //   );
// // };

// // export default Signup;

// import React, { useState, useEffect } from "react";
// import { useDispatch, useSelector } from "react-redux";
// import { signupUser } from "../../Store/auth/authSlice";
// import { useNavigate } from "react-router-dom";

// const Signup = () => {
//   const [formData, setFormData] = useState({
//     username: "",
//     email: "",
//     password: "",
//     role: "",
//     profile_description: "",
//     location: "",
//   });

//   const dispatch = useDispatch();
//   const navigate = useNavigate();

//   const { loading, error, success } = useSelector((state) => state.auth);

//   const handleChange = (e) => {
//     setFormData({ ...formData, [e.target.name]: e.target.value });
//   };

//   const handleSubmit = (e) => {
//     e.preventDefault();
//     dispatch(signupUser(formData));
//   };

//   useEffect(() => {
//     if (success) {
//       // Navigate only after successful signup
//       navigate("/");
//     }
//   }, [success, navigate]);

//   return (
//     <div className="min-h-screen flex items-center justify-center bg-gray-50">
//       <form
//         onSubmit={handleSubmit}
//         className="w-full max-w-md bg-white p-6 rounded-lg shadow-lg"
//       >
//         <h2 className="text-2xl font-bold mb-6">Sign Up</h2>

//         <input
//           type="text"
//           name="username"
//           placeholder="Username"
//           value={formData.username}
//           onChange={handleChange}
//           className="w-full mb-4 p-2 border rounded"
//           required
//         />

//         <input
//           type="email"
//           name="email"
//           placeholder="Email"
//           value={formData.email}
//           onChange={handleChange}
//           className="w-full mb-4 p-2 border rounded"
//           required
//         />

//         <input
//           type="password"
//           name="password"
//           placeholder="Password"
//           value={formData.password}
//           onChange={handleChange}
//           className="w-full mb-4 p-2 border rounded"
//           required
//         />

//         <input
//           type="text"
//           name="role"
//           placeholder="Role"
//           value={formData.role}
//           onChange={handleChange}
//           className="w-full mb-4 p-2 border rounded"
//         />

//         <input
//           type="text"
//           name="profile_description"
//           placeholder="Profile Description"
//           value={formData.profile_description}
//           onChange={handleChange}
//           className="w-full mb-4 p-2 border rounded"
//         />

//         <input
//           type="text"
//           name="location"
//           placeholder="Location"
//           value={formData.location}
//           onChange={handleChange}
//           className="w-full mb-4 p-2 border rounded"
//         />

//         {error && <p className="text-red-500">{error}</p>}
//         {success && <p className="text-green-500">Signup successful!</p>}
//         {loading && <p className="text-blue-500">Signing up...</p>}

//         <button
//           type="submit"
//           className="w-full bg-green-700 text-white py-2 rounded hover:bg-green-800 transition"
//           disabled={loading}
//         >
//           Sign Up
//         </button>
//       </form>
//     </div>
//   );
// };

// export default Signup;


























import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { fetchUserData } from "../../Store/auth/authSlice";
import { FaEdit, FaSignOutAlt } from "react-icons/fa";
import axios from "axios";
import { jwtDecode } from "jwt-decode";
import ProfileHeader from "./ProfileHeader";
import UserDetailsForm from "./UserDetailsForm";
import ApplicationsList from "./ApplicationsList";
import JobOffersList from "./JobOffersList";
import RecievedApplications from "./RecievedApplication";

const AccountPage = () => {
  const dispatch = useDispatch();
  const { user, loading, error } = useSelector((state) => state.auth);
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    profile_description: "",
    location: "",
  });
  const [jobApplications, setJobApplications] = useState([]);
  const [jobOffers, setJobOffers] = useState([]);
  const [showApps, setShowApps] = useState(false);
  const [selectedJob, setSelectedJob] = useState(null);
  const [eachJobApplications, setEachJobApplications] = useState([]);
  const [role, setRole] = useState("");

  useEffect(() => {
    const token = localStorage.getItem("token");

    if (token) {
      const decodedToken = jwtDecode(token);
      const userRole = decodedToken.role;
      setRole(userRole);
    } else {
      console.log("No token found in localStorage.");
    }
  }, []);

  useEffect(() => {
    dispatch(fetchUserData());
  }, [dispatch]);

  useEffect(() => {
    if (user) {
      setFormData({
        username: user.username || "",
        email: user.email || "",
        profile_description: user.profile_description || "",
        location: user.location || "",
      });
    }
  }, [user]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleProfileUpdate = async () => {
    try {
      const token = localStorage.getItem("token");
      const response = await axios.put(
        "http://localhost:5000/api/user/account/update",
        formData,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      alert("Profile updated successfully!");
      dispatch(fetchUserData());
      setIsEditing(false);
    } catch (error) {
      console.error("Error updating profile:", error);
    }
  };

  // const handleSeeJobApplicationsByThisUser = async () => {
  //   if (role !== "Applicant") {
  //     // console.error("Only applicants can view job applications.");
  //     return;
  //   }

  //   try {
  //     const token = localStorage.getItem("token");
  //     const response = await axios.get(
  //       "http://localhost:5000/api/user/account/job-applications",
  //       {
  //         headers: {
  //           Authorization: `Bearer ${token}`,
  //         },
  //       }
  //     );
  //     setJobApplications(response.data || []);
  //   } catch (error) {
  //     console.error("Error fetching job applications:", error);
  //   }
  // };

  // const handleSeeJobOffersByThisUser = async () => {
  //   if (role !== "Client") {
  //     // console.error("Only clients can view job offers.");
  //     return;
  //   }

  //   try {
  //     const token = localStorage.getItem("token");
  //     const response = await axios.get(
  //       "http://localhost:5000/api/user/account/job-offers",
  //       {
  //         headers: {
  //           Authorization: `Bearer ${token}`,
  //         },
  //       }
  //     );
  //     setJobOffers(response.data || []);
  //   } catch (error) {
  //     console.error("Error fetching job offers:", error);
  //   }
  // };

  // const handleSeeMyJobsApplications = async (jobId) => {
  //   if (role !== "Client") {
  //     // console.error("Only clients can view job applications for a job.");
  //     return;
  //   }

  //   try {
  //     const token = localStorage.getItem("token");
  //     const response = await axios.get(
  //       `http://localhost:5000/api/jobs/${jobId}/applications`,
  //       {
  //         headers: {
  //           Authorization: `Bearer ${token}`,
  //         },
  //       }
  //     );

  //     setSelectedJob(jobId);
  //     setEachJobApplications(response.data.applications || []);
  //     setShowApps(true);
  //   } catch (error) {
  //     console.error("Error fetching job applications:", error);
  //   }
  // };

  const handleDeleteJob = async (jobId) => {
    const confirmation = window.confirm(
      "Are you sure you want to delete this job?"
    );
    if (confirmation) {
      try {
        const token = localStorage.getItem("token");
        await axios.delete(`http://localhost:5000/api/jobs/delete/${jobId}`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        alert("Job deleted successfully!");
        setJobOffers(jobOffers.filter((job) => job.id !== jobId)); // Update the state to remove the deleted job
      } catch (error) {
        console.error("Error deleting job:", error);
        alert("There was an error deleting the job.");
      }
    }
  };

  useEffect(() => {
    if (user) {
      // handleSeeJobApplicationsByThisUser();
      // handleSeeJobOffersByThisUser();
    }
  }, [user]);

  const handleAcceptApplication = async (applicationId) => {
    try {
      const token = localStorage.getItem("token");
      const response = await axios.put(
        `http://localhost:5000/api/applications/${applicationId}/accept`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      alert("Application accepted successfully!");
      // Re-fetch the applications to reflect the updated status
      handleSeeJobApplicationsByThisUser();
    } catch (error) {
      console.error("Error accepting application:", error);
      alert("There was an error accepting the application.");
    }
  };

  const handleRejectApplication = async (applicationId) => {
    try {
      const token = localStorage.getItem("token");
      const response = await axios.put(
        `http://localhost:5000/api/applications/${applicationId}/reject`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      alert("Application rejected successfully!");
      // Re-fetch the applications to reflect the updated status
      handleSeeJobApplicationsByThisUser();
    } catch (error) {
      console.error("Error rejecting application:", error);
      alert("There was an error rejecting the application.");
    }
  };

  if (loading)
    return <p className="text-center text-blue-500 text-xl">Loading...</p>;
  if (error) return <p className="text-center text-red-500 text-xl">{error}</p>;
  if (!user)
    return (
      <p className="text-center text-gray-600 text-xl">
        No user data available
      </p>
    );

  return (
    <div className="min-h-screen py-20">
      <div className="">
        {/* Profile Header */}
        <ProfileHeader user={user} />

        {/* Content Sections */}
        <div className="py-4 lg:p-8">
          <UserDetailsForm
            formData={formData}
            handleInputChange={handleInputChange}
            isEditing={isEditing}
            user={user}
          />

          {/* {jobApplications && jobApplications.length > 0 ? (
            <ApplicationsList jobApplications={jobApplications} />
          ) : (
            <p className="text-center text-gray-500">
              No job applications found.
            </p>
          )}

          {jobOffers && jobOffers.length > 0 ? (
            <JobOffersList
              jobOffers={jobOffers}
              handleSeeMyJobsApplications={handleSeeMyJobsApplications}
              handleDeleteJob={handleDeleteJob}
            />
          ) : (
            <p className="text-center text-gray-500">
              No job applications found.
            </p>
          )} */}
        </div>

        {showApps && (
          <RecievedApplications
            eachJobApplications={eachJobApplications}
            selectedJob={selectedJob}
          />
        )}

        {/* Actions Section */}
        <div className="bg-gray-50 px-0 py-6 lg:p-6 border-t border-gray-200">
          <div className="flex justify-end space-x-4">
            {isEditing ? (
              <>
                <button
                  className="flex items-center bg-blue-500 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-blue-600 transition duration-300 ease-in-out"
                  onClick={handleProfileUpdate}
                >
                  Save Changes
                </button>
                <button
                  className="flex items-center bg-gray-500 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-gray-600 transition duration-300 ease-in-out"
                  onClick={() => setIsEditing(false)}
                >
                  Cancel
                </button>
              </>
            ) : (
              <>
                <button
                  className="flex items-center bg-green-700 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-green-600 transition duration-300 ease-in-out"
                  onClick={() => setIsEditing(true)}
                >
                  <FaEdit className="mr-2" /> Edit Profile
                </button>
                <button
                  className="flex items-center bg-red-600 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-red-600 transition duration-300 ease-in-out"
                  onClick={() => alert("Logout functionality here")}
                >
                  <FaSignOutAlt className="mr-2" /> Logout
                </button>
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AccountPage;









































// import React, { useState, useEffect } from "react";
// import JobDetailPage from "../Job Detail Page/JobDetailPage";
// import JobCard from "../Job cards/JobCard";
// import { useDispatch, useSelector } from "react-redux";
// import { fetchJobOffers } from "../../Store/actions/jobsActions";
// import { useLocation, useNavigate } from "react-router-dom"; // Import useNavigate

// const LatestJobs = () => {
//   const [selectedJob, setSelectedJob] = useState(null);
//   const [isDetailOpen, setIsDetailOpen] = useState(false);
//   const dispatch = useDispatch();
//   const navigate = useNavigate(); // Initialize useNavigate

//   const jobsData = useSelector((state) => state.jobOffersReducer);

//   const location = useLocation();
//   const queryParams = new URLSearchParams(location.search);
//   const initialSearchQuery = queryParams.get("search") || "";
//   const initialLocationQuery = queryParams.get("location") || "";

//   const [searchQuery, setSearchQuery] = useState(initialSearchQuery);
//   const [locationQuery, setLocationQuery] = useState(initialLocationQuery);

//   useEffect(() => {
//     dispatch(fetchJobOffers({ search: searchQuery, location: locationQuery }));
//   }, [dispatch, searchQuery, locationQuery]);

//   const handleJobClick = (job) => {
//     console.log("Job clicked:", job); // Debugging line
//     setSelectedJob(job);
//     setIsDetailOpen(true);
//   };

//   const handleCloseDetail = () => {
//     setIsDetailOpen(false);
//     setSelectedJob(null);
//   };

//   const handleSearchChange = (e) => {
//     const value = e.target.value;
//     setSearchQuery(value);
//     // If the search input is cleared, update the URL
//     if (value === "") {
//       setLocationQuery(""); // Clear location query
//       navigate(`/find-job`); // Navigate to the route without search queries
//     }
//   };

//   const handleLocationChange = (e) => {
//     const value = e.target.value;
//     setLocationQuery(value);
//     // If the location input is cleared, update the URL
//     if (value === "") {
//       setSearchQuery(""); // Clear search query
//       navigate(`/find-job`); // Navigate to the route without location query
//     }
//   };

//   const handleSaveJob = async (jobId) => {
//     try {
//       const response = await axiosInstance.post("/save-job", { jobId });

//       setSaveStatus({
//         message: response.data.message,
//         success: true,
//       });
//     } catch (error) {
//       const errorMessage =
//         error.response && error.response.data.error
//           ? error.response.data.error
//           : "Failed to save the job.";
//       setSaveStatus({
//         message: errorMessage,
//         success: false,
//       });
//     }
//   };

//   return (
//     <section className="flex flex-col items-center justify-center gap-14 py-20">
//       <h1 className="heading text-slate-700 font-semibold capitalize">
//         explore <span className="text-green-700">jobs</span>
//       </h1>

//       <>
//         <div className="flex items-center w-full max-w-3xl">
//           <div className="flex items-center bg-slate-200 rounded-lg overflow-hidden w-full">
//             <input
//               type="text"
//               className="flex-1 px-5 py-3 text-base bg-transparent text-gray-700 focus:outline-none"
//               placeholder="Enter job title, keywords..."
//               value={searchQuery}
//               onChange={handleSearchChange}
//             />

//             <span className="w-px h-10 bg-gray-300"></span>

//             <input
//               type="text"
//               className="flex-1 px-5 py-3 text-base bg-transparent text-gray-700 focus:outline-none"
//               placeholder="Enter location..."
//               value={locationQuery}
//               onChange={handleLocationChange}
//             />
//           </div>
//         </div>

//         <div className="grid grid-cols-1 lg:grid-cols-4 w-full max-w-8xl gap-8">
//           <div className="lg:col-span-3">
//             {jobsData.jobOffers && jobsData.jobOffers.length > 0 ? (
//               jobsData.jobOffers.map((job) => (
//                 <JobCard
//                   job={job}
//                   handleJobClick={handleJobClick}
//                   key={job.id}
//                   handleSaveJob={() => handleSaveJob(job.id)}
//                 />
//               ))
//             ) : (
//               <div>No jobs found.</div>
//             )}
//           </div>

//           {isDetailOpen && selectedJob && (
//             <JobDetailPage job={selectedJob} onClose={handleCloseDetail} />
//           )}
//         </div>
//       </>
//     </section>
//   );
// };

// export default LatestJobs;





























// import React, { useState, useEffect } from "react";
// import { useDispatch, useSelector } from "react-redux";
// import { signupUser } from "../../Store/auth/authSlice";
// import { useNavigate } from "react-router-dom";

// const Signup = () => {
//   const [formData, setFormData] = useState({
//     fullname: "",
//     username: "",
//     email: "",
//     password: "",
//     role: "",
//     profile_description: "",
//     location: "",
//     profilePicture: null,
//   });

//   const dispatch = useDispatch();
//   const navigate = useNavigate();
//   const { loading, error, success } = useSelector((state) => state.auth);

//   const handleChange = (e) => {
//     if (e.target.name === "profilePicture") {
//       setFormData({ ...formData, profilePicture: e.target.files[0] }); // Store the file
//     } else {
//       setFormData({ ...formData, [e.target.name]: e.target.value });
//     }
//   };

//   const handleSubmit = (e) => {
//     e.preventDefault();
//     const formDataToSubmit = new FormData();
//     Object.entries(formData).forEach(([key, value]) => {
//       formDataToSubmit.append(key, value);
//     });
//     dispatch(signupUser(formDataToSubmit)); // Pass the FormData
//   };

//   useEffect(() => {
//     if (success) {
//       navigate("/");
//     }
//   }, [success, navigate]);

//   return (
//     <div className="min-h-screen flex items-center justify-center bg-gray-50">
//       <form
//         onSubmit={handleSubmit}
//         className="w-full max-w-md bg-white p-6 rounded-lg shadow-lg"
//       >
//         <h2 className="text-2xl font-bold mb-6">Sign Up</h2>

//         <input
//           type="text"
//           name="fullname"
//           placeholder="fullname"
//           value={formData.fullname}
//           onChange={handleChange}
//           className="w-full mb-4 p-2 border rounded"
//           required
//         />

//         <input
//           type="text"
//           name="username"
//           placeholder="Username"
//           value={formData.username}
//           onChange={handleChange}
//           className="w-full mb-4 p-2 border rounded"
//           required
//         />

//         <input
//           type="email"
//           name="email"
//           placeholder="Email"
//           value={formData.email}
//           onChange={handleChange}
//           className="w-full mb-4 p-2 border rounded"
//           required
//         />

//         <input
//           type="password"
//           name="password"
//           placeholder="Password"
//           value={formData.password}
//           onChange={handleChange}
//           className="w-full mb-4 p-2 border rounded"
//           required
//         />

//         <input
//           type="text"
//           name="role"
//           placeholder="Role"
//           value={formData.role}
//           onChange={handleChange}
//           className="w-full mb-4 p-2 border rounded"
//         />

//         <input
//           type="text"
//           name="profile_description"
//           placeholder="Profile Description"
//           value={formData.profile_description}
//           onChange={handleChange}
//           className="w-full mb-4 p-2 border rounded"
//         />

//         <input
//           type="text"
//           name="location"
//           placeholder="Location"
//           value={formData.location}
//           onChange={handleChange}
//           className="w-full mb-4 p-2 border rounded"
//         />

//         <input
//           type="file"
//           name="profilePicture"
//           onChange={handleChange}
//           className="w-full mb-4 p-2 border rounded"
//         />

//         {error && <p className="text-red-500">{error}</p>}
//         {success && <p className="text-green-500">Signup successful!</p>}
//         {loading && <p className="text-blue-500">Signing up...</p>}

//         <button
//           type="submit"
//           className="w-full bg-green-700 text-white py-2 rounded hover:bg-green-800 transition"
//           disabled={loading}
//         >
//           Sign Up
//         </button>
//       </form>
//     </div>
//   );
// };

// export default Signup;



















































// const pool = require("../config/db");

// const getPublicJobs = async (req, res) => {
//   const { search, location } = req.query;

//   let query = "SELECT * FROM jobs LIMIT 3";
//   let values = [];

//   if (search || location) {
//     const conditions = [];

//     // Add search condition if it's provided
//     if (search) {
//       conditions.push("(title ILIKE $1 OR type ILIKE $1)");
//       values.push(`%${search}%`);
//     }

//     // Add location condition if it's provided
//     if (location) {
//       conditions.push("location ILIKE $" + (values.length + 1));
//       values.push(`%${location}%`);
//     }

//     // Combine conditions with AND and append them to the query
//     query += ` WHERE ${conditions.join(" AND ")}`;
//   }

//   try {
//     const result = await pool.query(query, values);
//     res.json(result.rows);
//   } catch (err) {
//     res.status(500).json({ error: "Server error" });
//   }
// };

// // Get all jobs
// const getAllJobs = async (req, res) => {
//   const { search, location } = req.query;
//   let query = "SELECT * FROM jobs";
//   let values = [];

//   // Check if either search or location is provided
//   if (search || location) {
//     const conditions = [];

//     // Add search condition if it's provided
//     if (search) {
//       conditions.push("(title ILIKE $1 OR type ILIKE $1)");
//       values.push(`%${search}%`);
//     }

//     // Add location condition if it's provided
//     if (location) {
//       conditions.push("location ILIKE $" + (values.length + 1));
//       values.push(`%${location}%`);
//     }

//     // Combine conditions with AND and append them to the query
//     query += ` WHERE ${conditions.join(" AND ")}`;
//   }

//   try {
//     const result = await pool.query(query, values);
//     res.json(result.rows);
//   } catch (err) {
//     res.status(500).json({ error: "Server error" });
//   }
// };

// // Get job by ID
// const getJobById = async (req, res) => {
//   const { id } = req.params;
//   try {
//     const result = await pool.query("SELECT * FROM jobs WHERE id = $1", [id]);
//     if (result.rows.length === 0) {
//       return res.status(404).json({ error: "Job not found" });
//     }
//     res.json(result.rows[0]);
//   } catch (err) {
//     res.status(500).json({ error: "Server error" });
//   }
// };

// // Create a new job
// const createJob = async (req, res) => {
//   const { title, type, location, salary, experience_level, description } =
//     req.body;

//   try {
//     if (!req.user || !req.user.id) {
//       return res
//         .status(401)
//         .json({ message: "Unauthorized: No user ID in request" });
//     }

//     const client_id = req.user.id;

//     const result = await pool.query(
//       `INSERT INTO jobs (title, type, location, salary, experience_level, client_id, description)
//        VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *`,
//       [title, type, location, salary, experience_level, client_id, description]
//     );

//     res.status(201).json(result.rows[0]);
//   } catch (err) {
//     console.error("Error creating job:", err);
//     res.status(500).json({ error: "Server error in create" });
//   }
// };

// // Update a job by ID
// const updateJob = async (req, res) => {
//   const { id } = req.params;
//   const {
//     title,
//     type,
//     location,
//     salary,
//     experience_level,
//     client_id,
//     description,
//   } = req.body;

//   try {
//     const result = await pool.query(
//       `UPDATE jobs
//        SET title = $1, type = $2, location = $3, salary = $4, experience_level = $5, client_id = $6, description = $7
//        WHERE id = $8 RETURNING *`,
//       [
//         title,
//         type,
//         location,
//         salary,
//         experience_level,
//         client_id,
//         description,
//         id,
//       ]
//     );

//     if (result.rows.length === 0) {
//       return res.status(404).json({ error: "Job not found" });
//     }

//     res.json(result.rows[0]);
//   } catch (err) {
//     console.error("Error updating job:", err);
//     res.status(500).json({ error: "Server error" });
//   }
// };

// // Delete a job by ID
// const deleteJob = async (req, res) => {
//   const { id } = req.params;

//   try {
//     const result = await pool.query(
//       "DELETE FROM jobs WHERE id = $1 RETURNING *",
//       [id]
//     );

//     if (result.rows.length === 0) {
//       return res.status(404).json({ error: "Job not found" });
//     }

//     res.json({ message: "Job deleted successfully" });
//   } catch (err) {
//     console.error("Error deleting job:", err);
//     res.status(500).json({ error: "Server error" });
//   }
// };

// module.exports = {
//   getAllJobs,
//   getJobById,
//   createJob,
//   updateJob,
//   deleteJob,
//   getPublicJobs,
// };


















const pool = require("../config/db");

// Get all jobs
const getAllJobs = async (req, res) => {
  const { search, location } = req.query;
  let query = "SELECT * FROM jobs";
  let values = [];

  // Check if either search or location is provided
  if (search || location) {
    const conditions = [];

    // Add search condition if it's provided
    if (search) {
      conditions.push("(title ILIKE $1 OR type ILIKE $1)");
      values.push(`%${search}%`);
    }

    // Add location condition if it's provided
    if (location) {
      conditions.push("location ILIKE $" + (values.length + 1));
      values.push(`%${location}%`);
    }

    // Combine conditions with AND and append them to the query
    query += ` WHERE ${conditions.join(" AND ")}`;
  }

  try {
    const result = await pool.query(query, values);
    res.json(result.rows);
  } catch (err) {
    res.status(500).json({ error: "Server error" });
  }
};

// Get job by ID
const getJobById = async (req, res) => {
  const { id } = req.params;
  try {
    const result = await pool.query("SELECT * FROM jobs WHERE id = $1", [id]);
    if (result.rows.length === 0) {
      return res.status(404).json({ error: "Job not found" });
    }
    res.json(result.rows[0]);
  } catch (err) {
    res.status(500).json({ error: "Server error" });
  }
};

// Create a new job
const createJob = async (req, res) => {
  const {
    title,
    type,
    location,
    salary,
    experience_level,
    description,
    skills,
    images,
    preferred_qualifications,
    project_length,
  } = req.body;

  try {
    if (!req.user || !req.user.id) {
      return res
        .status(401)
        .json({ message: "Unauthorized: No user ID in request" });
    }

    const client_id = req.user.id;

    const result = await pool.query(
      `INSERT INTO jobs (title, type, location, salary, experience_level, client_id, description, skills, images, preferred_qualifications, project_length)
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING *`,
      [
        title,
        type,
        location,
        salary,
        experience_level,
        client_id,
        description,
        skills,
        images,
        preferred_qualifications,
        project_length,
      ]
    );

    res.status(201).json(result.rows[0]);
  } catch (err) {
    console.error("Error creating job:", err);
    res.status(500).json({ error: "Server error in create" });
  }
};

// const createJob = async (req, res) => {
//   const { title, type, location, salary, experience_level, description } =
//     req.body;

//   try {
//     if (!req.user || !req.user.id) {
//       return res
//         .status(401)
//         .json({ message: "Unauthorized: No user ID in request" });
//     }

//     const client_id = req.user.id;

//     const result = await pool.query(
//       `INSERT INTO jobs (title, type, location, salary, experience_level, client_id, description)
//        VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *`,
//       [title, type, location, salary, experience_level, client_id, description]
//     );

//     res.status(201).json(result.rows[0]);
//   } catch (err) {
//     console.error("Error creating job:", err);
//     res.status(500).json({ error: "Server error in create" });
//   }
// };

// Update a job by ID
const updateJob = async (req, res) => {
  const { id } = req.params;
  const {
    title,
    type,
    location,
    salary,
    experience_level,
    description,
    skills,
    images,
    preferred_qualifications,
    project_length,
  } = req.body;

  try {
    const result = await pool.query(
      `UPDATE jobs
       SET title = $1, type = $2, location = $3, salary = $4, experience_level = $5, description = $6, skills = $7, images = $8, preferred_qualifications = $9, project_length = $10
       WHERE id = $11 RETURNING *`,
      [
        title,
        type,
        location,
        salary,
        experience_level,
        description,
        skills,
        images,
        preferred_qualifications,
        project_length,
        id,
      ]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: "Job not found" });
    }

    res.json(result.rows[0]);
  } catch (err) {
    console.error("Error updating job:", err);
    res.status(500).json({ error: "Server error" });
  }
};

// const updateJob = async (req, res) => {
//   const { id } = req.params;
//   const {
//     title,
//     type,
//     location,
//     salary,
//     experience_level,
//     client_id,
//     description,
//   } = req.body;

//   try {
//     const result = await pool.query(
//       `UPDATE jobs
//        SET title = $1, type = $2, location = $3, salary = $4, experience_level = $5, client_id = $6, description = $7
//        WHERE id = $8 RETURNING *`,
//       [
//         title,
//         type,
//         location,
//         salary,
//         experience_level,
//         client_id,
//         description,
//         id,
//       ]
//     );

//     if (result.rows.length === 0) {
//       return res.status(404).json({ error: "Job not found" });
//     }

//     res.json(result.rows[0]);
//   } catch (err) {
//     console.error("Error updating job:", err);
//     res.status(500).json({ error: "Server error" });
//   }
// };

// Delete a job by ID
const deleteJob = async (req, res) => {
  const { id } = req.params;

  try {
    const result = await pool.query(
      "DELETE FROM jobs WHERE id = $1 RETURNING *",
      [id]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: "Job not found" });
    }

    res.json({ message: "Job deleted successfully" });
  } catch (err) {
    console.error("Error deleting job:", err);
    res.status(500).json({ error: "Server error" });
  }
};

module.exports = {
  getAllJobs,
  getJobById,
  createJob,
  updateJob,
  deleteJob,
};




















































// import React, { useState } from "react";
// import axios from "axios";
// import CreatableSelect from "react-select/creatable";

// const JobPostingPage = () => {
//   const [formData, setFormData] = useState({
//     title: "",
//     description: "",
//     experience_level: "",
//     location: "",
//     salary: "",
//     type: "",
//     preferred_qualifications: "",
//     images: [],
//     project_length: "",
//     skills: [],
//   });
//   const [message, setMessage] = useState("");
//   const [error, setError] = useState("");

//   const handleChange = (e) => {
//     setFormData({ ...formData, [e.target.name]: e.target.value });
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     try {
//       const token = localStorage.getItem("token");
//       const response = await axios.post(
//         "http://localhost:5000/api/post-job",
//         formData,
//         {
//           headers: {
//             "Content-Type": "application/json",
//             Authorization: `Bearer ${token}`,
//           },
//         }
//       );
//       if (response.status === 201) {
//         setMessage("Job posted successfully");
//         setError("");
//       }
//     } catch (error) {
//       setMessage("");
//       setError(error.response?.data?.message || "An error occurred.");
//     }
//   };

//   // Handle skills input with CreatableSelect
//   const handleSkillsChange = (selectedOptions) => {
//     const skillsArray = selectedOptions.map((option) => option.value);

//     // Convert to PostgreSQL array format
//     const skillsPostgresFormat = `{${skillsArray.join(", ")}}`;

//     setFormData({
//       ...formData,
//       skills: skillsPostgresFormat, // Save the formatted array
//     });
//   };

//   return (
//     <div className="flex items-center justify-center flex-col gap-14 py-20">
//       <h1 className="heading text-slate-700 font-semibold capitalize">
//         Post a <span className="text-green-700">Job!</span>
//       </h1>

//       <div className="px-20 w-full">
//         <div className="w-full p-8 border border-gray-200">
//           <p className="text-lg text-gray-600 mb-7">
//             <span className="uppercase text-green-700 text-xl font-semibold mr-1">
//               notice:
//             </span>
//             Fill out the detailed form below to post a job on our platform.
//           </p>

//           <h2 className="text-3xl font-bold text-green-700 mb-6">
//             Job Details
//           </h2>
//           <form onSubmit={handleSubmit} className="space-y-6">
//             {/* Job Title */}
//             <div>
//               <label
//                 htmlFor="title"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Job Title
//               </label>
//               <input
//                 id="title"
//                 name="title"
//                 type="text"
//                 value={formData.title}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               />
//             </div>

//             {/* Description */}
//             <div>
//               <label
//                 htmlFor="description"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Description
//               </label>
//               <textarea
//                 id="description"
//                 name="description"
//                 rows="4"
//                 value={formData.description}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               />
//             </div>

//             {/* Experience Level */}
//             <div>
//               <label
//                 htmlFor="experience_level"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Experience Level
//               </label>
//               <select
//                 id="experience_level"
//                 name="experience_level"
//                 value={formData.experience_level}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               >
//                 <option value="" disabled>
//                   Select experience level
//                 </option>
//                 <option value="Entry">Entry Level</option>
//                 <option value="Mid">Mid Level</option>
//                 <option value="Senior">Senior Level</option>
//               </select>
//             </div>

//             {/* Location */}
//             <div>
//               <label
//                 htmlFor="location"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Location
//               </label>
//               <input
//                 id="location"
//                 name="location"
//                 type="text"
//                 value={formData.location}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               />
//             </div>

//             {/* qualifications */}
//             <div>
//               <label
//                 htmlFor="location"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Preferred Qualifications
//               </label>
//               <input
//                 id="preferredQualifications"
//                 name="preferredQualifications"
//                 type="text"
//                 value={formData.preferred_qualifications}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               />
//             </div>

//             {/* skills */}
//             <div>
//               <label
//                 htmlFor="location"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Preferred Skills
//               </label>
//               <CreatableSelect
//                 isMulti
//                 onChange={handleSkillsChange}
//                 placeholder="Add your skills"
//                 className="w-full"
//               />
//             </div>

//             {/* Salary */}
//             <div>
//               <label
//                 htmlFor="salary"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Salary
//               </label>
//               <input
//                 id="salary"
//                 name="salary"
//                 type="text"
//                 value={formData.salary}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//                 placeholder="e.g., $500 - $1000"
//               />
//             </div>

//             {/* project length */}
//             <div>
//               <label
//                 htmlFor="salary"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Project Length
//               </label>
//               <input
//                 id="projectLength"
//                 name="projectLength"
//                 type="text"
//                 value={formData.project_length}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//                 placeholder="e.g., $500 - $1000"
//               />
//             </div>

//             {/* Type */}
//             <div>
//               <label
//                 htmlFor="type"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Job Type
//               </label>
//               <select
//                 id="type"
//                 name="type"
//                 value={formData.type}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4 focus:outline-none focus:ring-2 focus:ring-green-500 transition-shadow duration-300"
//               >
//                 <option value="" disabled>
//                   Select job type
//                 </option>
//                 <option value="Full-time">Full-time</option>
//                 <option value="Part-time">Part-time</option>
//                 <option value="Contract">Contract</option>
//               </select>
//             </div>

//             {/* Submit Button */}
//             <div className="flex justify-center">
//               <button
//                 type="submit"
//                 className="bg-green-600 text-white py-4 px-8 rounded-xl hover:bg-green-700 transition-colors duration-300"
//               >
//                 Post Job
//               </button>
//             </div>
//           </form>

//           {message && (
//             <p className="mt-6 text-center text-green-600">{message}</p>
//           )}
//           {error && <p className="mt-6 text-center text-red-600">{error}</p>}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default JobPostingPage;





























// import { useState, useEffect, useCallback } from "react";
// import axios from "axios";
// import { FaSearch, FaStar } from "react-icons/fa";
// import { AiOutlineUser, AiOutlineFilter } from "react-icons/ai";
// import debounce from "lodash/debounce";

// export default function FindTalents() {
//   const [searchQuery, setSearchQuery] = useState("");
//   const [filter, setFilter] = useState("all");
//   const [talents, setTalents] = useState([]);
//   const [selectedTalent, setSelectedTalent] = useState(null);
//   const [isProfileModalOpen, setProfileModalOpen] = useState(false);
//   const [isMessageModalOpen, setMessageModalOpen] = useState(false);

//   const token = localStorage.getItem("token");

//   useEffect(() => {
//     // Fetch all talents on component mount
//     async function fetchTalents() {
//       try {
//         const response = await axios.get("http://localhost:5000/api/talents", {
//           headers: {
//             Authorization: `Bearer ${token}`,
//           },
//         });
//         setTalents(response.data);
//       } catch (error) {
//         console.error("Error fetching talents", error);
//       }
//     }
//     fetchTalents();
//   }, []);

//   // Define the debounced search function
//   const debouncedSearch = useCallback(
//     debounce(async (query) => {
//       try {
//         const response = await axios.get(
//           "http://localhost:5000/api/talents/search",
//           {
//             headers: {
//               Authorization: `Bearer ${token}`,
//             },
//             params: { name: query },
//           }
//         );
//         setTalents(response.data);
//       } catch (error) {
//         console.error("Error searching talents", error);
//       }
//     }, 50),
//     []
//   );

//   // Handle search input change
//   const handleSearchInputChange = (e) => {
//     const query = e.target.value;
//     setSearchQuery(query);
//     debouncedSearch(query);
//   };

//   // Handle filter toggle
//   const handleFilterToggle = () => {
//     setFilter((prevFilter) => (prevFilter === "all" ? "featured" : "all"));
//   };

//   const openProfileModal = (talent) => {
//     setSelectedTalent(talent);
//     setProfileModalOpen(true);
//   };

//   const closeProfileModal = () => {
//     setProfileModalOpen(false);
//   };

//   const openMessageModal = (talent) => {
//     setSelectedTalent(talent);
//     setMessageModalOpen(true);
//   };

//   return (
//     <section className="flex flex-col items-center justify-center gap-14 py-20">
//       <h1 className="heading text-slate-700 font-semibold capitalize">
//         Find <span className="text-green-700">Talents</span>
//       </h1>

//       <div className="w-full">
//         <div className="flex flex-col md:flex-row gap-6 mb-12">
//           <div className="relative w-full md:w-2/3">
//             <input
//               type="text"
//               placeholder="Search talents by name, skills, etc."
//               value={searchQuery}
//               onChange={handleSearchInputChange}
//               className="w-full py-3 pl-10 pr-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-700"
//             />
//             <FaSearch className="absolute left-3 top-3 text-gray-500 cursor-pointer" />
//           </div>

//           <div className="relative w-full md:w-1/3">
//             <button
//               onClick={handleFilterToggle}
//               className="w-full py-3 px-4 border border-gray-300 rounded-lg bg-green-700 text-white flex items-center justify-center gap-2 hover:bg-green-800"
//             >
//               <AiOutlineFilter />
//               {filter === "all" ? "Show Featured" : "Show All"}
//             </button>
//           </div>
//         </div>

//         {/* Featured Talents Grid */}
//         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-12">
//           {talents.map((talent, index) => (
//             <div
//               key={index}
//               className="relative bg-white rounded-lg shadow-lg overflow-hidden"
//             >
//               <img
//                 src={talent.image}
//                 alt={talent.name}
//                 className="w-full h-48 object-cover"
//               />
//               <div className="p-6">
//                 <h3 className="text-xl font-semibold text-slate-800 mb-2">
//                   {talent.name}
//                 </h3>
//                 <div className="flex items-center mb-2 text-yellow-400">
//                   {[...Array(5)].map((_, i) => (
//                     <FaStar
//                       key={i}
//                       className={`mr-1 ${
//                         i < Math.round(talent.rating)
//                           ? "text-yellow-500"
//                           : "text-gray-300"
//                       }`}
//                     />
//                   ))}
//                   <span className="text-gray-600 ml-2">({talent.rating})</span>
//                 </div>
//                 <p className="text-gray-600 mb-2">
//                   <strong>Skills:</strong> {talent.skills.join(", ")}
//                 </p>
//                 <p className="text-gray-600">
//                   <strong>Projects:</strong> {talent.projects}
//                 </p>

//                 {/* View Profile and Message Buttons */}
//                 <div className="flex justify-end gap-3 mt-4">
//                   <button
//                     onClick={() => openProfileModal(talent)}
//                     className="bg-blue-600 text-white px-4 py-2 rounded-lg"
//                   >
//                     View Profile
//                   </button>
//                   <button
//                     onClick={() => openMessageModal(talent)}
//                     className="bg-green-600 text-white px-4 py-2 rounded-lg"
//                   >
//                     Message
//                   </button>
//                 </div>
//               </div>
//             </div>
//           ))}
//         </div>

//         <div className="text-center mt-12">
//           <p className="text-lg text-gray-700 mb-4">
//             Interested in joining our talent pool?
//           </p>
//           <button className="bg-green-700 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-green-800 transition">
//             <AiOutlineUser className="inline-block mr-2" />
//             Find Talents
//           </button>
//         </div>
//       </div>

//       {isProfileModalOpen && selectedTalent && (
//         <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
//           <div className="bg-white p-8 rounded-lg shadow-lg w-2/3">
//             <h2 className="text-2xl font-semibold mb-4">
//               {selectedTalent.name}
//             </h2>
//             <p>
//               <strong>Bio:</strong> {selectedTalent.bio}
//             </p>
//             <p>
//               <strong>Experience:</strong> {selectedTalent.experience}
//             </p>
//             <p>
//               <strong>Skills:</strong> {selectedTalent.skills.join(", ")}
//             </p>
//             <p>
//               <strong>Availability:</strong> {selectedTalent.availability}
//             </p>
//             <div className="flex justify-between mt-6">
//               <button className="bg-green-600 text-white px-6 py-2 rounded-lg">
//                 Hire {selectedTalent.name}
//               </button>
//               <button
//                 onClick={closeProfileModal}
//                 className="bg-red-600 text-white px-6 py-2 rounded-lg"
//               >
//                 Close
//               </button>
//             </div>
//           </div>
//         </div>
//       )}

//       {isMessageModalOpen && selectedTalent && (
//         <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
//           <div className="bg-white p-6 rounded-lg shadow-lg w-2/3">
//             <h2 className="text-2xl font-semibold mb-4">
//               Message {selectedTalent.name}
//             </h2>
//             {/* Insert chat messaging component here */}
//             <ChatBox talent={selectedTalent} />
//             <button
//               onClick={() => setMessageModalOpen(false)}
//               className="mt-4 bg-red-600 text-white px-6 py-2 rounded-lg"
//             >
//               Close
//             </button>
//           </div>
//         </div>
//       )}
//     </section>
//   );
// }

















// import React, { useEffect, useState } from "react";
// import axios from "axios";

// const AdminPanel = () => {
//   const [users, setUsers] = useState([]);
//   const [messages, setMessages] = useState([]);
//   const [jobs, setJobs] = useState([]);

//   // Helper function to get the Authorization header
//   const getAuthHeader = () => {
//     return {
//       headers: {
//         Authorization: `Bearer ${localStorage.getItem("token")}`, // Ensure the token is stored in localStorage
//       },
//     };
//   };

//   const fetchUsers = async () => {
//     try {
//       const response = await axios.get(
//         "http://localhost:5000/api/users",
//         getAuthHeader()
//       );
//       setUsers(response.data);
//     } catch (error) {
//       console.error("Error fetching users:", error);
//     }
//   };

//   const fetchMessages = async () => {
//     try {
//       const response = await axios.get(
//         "http://localhost:5000/api/contact-messages",
//         getAuthHeader()
//       );
//       setMessages(response.data);
//     } catch (error) {
//       console.error("Error fetching messages:", error);
//     }
//   };

//   const fetchJobs = async () => {
//     try {
//       const response = await axios.get(
//         "http://localhost:5000/api/jobs",
//         getAuthHeader()
//       );
//       setJobs(response.data);
//     } catch (error) {
//       console.error("Error fetching jobs:", error);
//     }
//   };

//   useEffect(() => {
//     fetchUsers();
//     fetchMessages();
//     fetchJobs();
//   }, []);

//   return (
//     <div className="min-h-screen flex justify-center flex-col py-20">
//       <h1>Admin Panel</h1>

//       <h2>Users</h2>
//       <ul>
//         {users.map((user) => (
//           <li key={user.id}>
//             {user.fullname} - {user.email}
//           </li>
//         ))}
//       </ul>

//       <h2>Contact Messages</h2>
//       <ul>
//         {messages.map((message) => (
//           <li key={message.id}>
//             {message.message} - From: {message.email}
//           </li>
//         ))}
//       </ul>

//       <h2>Today's Jobs</h2>
//       <ul>
//         {jobs.map((job) => (
//           <li key={job.id}>
//             {job.title} - {new Date(job.created_at).toLocaleString()}
//           </li>
//         ))}
//       </ul>
//     </div>
//   );
// };

// export default AdminPanel;















































// const pool = require("../config/db");

// // Get all jobs
// const getAllJobs = async (req, res) => {
//   const { search, location } = req.query;
//   let query = "SELECT * FROM jobs";
//   let values = [];

//   // Check if either search or location is provided
//   if (search || location) {
//     const conditions = [];

//     // Add search condition if it's provided
//     if (search) {
//       conditions.push("(title ILIKE $1 OR type ILIKE $1)");
//       values.push(`%${search}%`);
//     }

//     // Add location condition if it's provided
//     if (location) {
//       conditions.push("location ILIKE $" + (values.length + 1));
//       values.push(`%${location}%`);
//     }

//     // Combine conditions with AND and append them to the query
//     query += ` WHERE ${conditions.join(" AND ")}`;
//   }

//   try {
//     const result = await pool.query(query, values);
//     res.json(result.rows);
//   } catch (err) {
//     res.status(500).json({ error: "Server error" });
//   }
// };

// // Get job by ID
// const getJobById = async (req, res) => {
//   const { id } = req.params;
//   try {
//     const result = await pool.query("SELECT * FROM jobs WHERE id = $1", [id]);
//     if (result.rows.length === 0) {
//       return res.status(404).json({ error: "Job not found" });
//     }
//     res.json(result.rows[0]);
//   } catch (err) {
//     res.status(500).json({ error: "Server error" });
//   }
// };

// // Create a new job
// const createJob = async (req, res) => {
//   console.log(`b d ${req.body}`);

//   const {
//     title,
//     type,
//     location,
//     salary,
//     experience_level,
//     description,
//     skills,
//     preferred_qualifications,
//     project_length,
//   } = req.body;

//   // Check for user and uploaded file
//   if (!req.user || !req.user.id) {
//     return res
//       .status(401)
//       .json({ message: "Unauthorized: No user ID in request" });
//   }
//   const client_id = req.user.id;

//   console.log(
//     title,
//     type,
//     location,
//     salary,
//     experience_level,
//     description,
//     skills,
//     preferred_qualifications,
//     project_length,
//     client_id
//   );

//   try {
//     // Insert job details into the database
//     const result = await pool.query(
//       `INSERT INTO jobs (title, type, location, salary, experience_level, description, skills, preferred_qualifications, project_length, client_id)
//        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *`,
//       [
//         title,
//         type,
//         location,
//         salary,
//         experience_level,
//         description,
//         skills,
//         preferred_qualifications,
//         project_length,
//         client_id,
//       ]
//     );

//     res.status(201).json({
//       message: "Job created successfully",
//       job: result.rows[0],
//     });
//   } catch (err) {
//     console.error(err); // Log the error for debugging
//     res.status(500).json({ message: "Error creating job" });
//   }
// };

// // Update a job by ID
// const updateJob = async (req, res) => {
//   const { id } = req.params;
//   const {
//     title,
//     type,
//     location,
//     salary,
//     experience_level,
//     description,
//     skills,
//     images,
//     preferred_qualifications,
//     project_length,
//   } = req.body;

//   try {
//     const result = await pool.query(
//       `UPDATE jobs
//        SET title = $1, type = $2, location = $3, salary = $4, experience_level = $5, description = $6, skills = $7, images = $8, preferred_qualifications = $9, project_length = $10
//        WHERE id = $11 RETURNING *`,
//       [
//         title,
//         type,
//         location,
//         salary,
//         experience_level,
//         description,
//         skills,
//         images,
//         preferred_qualifications,
//         project_length,
//         id,
//       ]
//     );

//     if (result.rows.length === 0) {
//       return res.status(404).json({ error: "Job not found" });
//     }

//     res.json(result.rows[0]);
//   } catch (err) {
//     console.error("Error updating job:", err);
//     res.status(500).json({ error: "Server error" });
//   }
// };

// // Delete a job by ID
// const deleteJob = async (req, res) => {
//   const { id } = req.params;

//   try {
//     const result = await pool.query(
//       "DELETE FROM jobs WHERE id = $1 RETURNING *",
//       [id]
//     );

//     if (result.rows.length === 0) {
//       return res.status(404).json({ error: "Job not found" });
//     }

//     res.json({ message: "Job deleted successfully" });
//   } catch (err) {
//     console.error("Error deleting job:", err);
//     res.status(500).json({ error: "Server error" });
//   }
// };

// module.exports = {
//   getAllJobs,
//   getJobById,
//   createJob,
//   updateJob,
//   deleteJob,
// };






















































// import { useEffect, useState } from "react";
// import { MdNotificationsNone, MdOutlineAccountCircle } from "react-icons/md";
// import { useDispatch, useSelector } from "react-redux";
// import { Link, NavLink } from "react-router-dom";
// import { checkTokenExpiration } from "../../Store/auth/authSlice";

// export default function Navbar() {
//   const dispatch = useDispatch();
//   const { token, role } = useSelector((state) => state.auth);

//   // Check token expiration on mount
//   useEffect(() => {
//     dispatch(checkTokenExpiration());
//   }, [dispatch]);

//   return (
//     <nav className="fixed top-0 left-0 z-20 w-full bg-gray-100 text-slate-800 rounded-md">
//       <div className="container mx-auto flex justify-between items-center py-3 px-5 xl:px-10">
//         <div className="flex items-center space-x-12">
//           <NavLink
//             to="/"
//             className="text-3xl font-bold font-heading text-green-700"
//           >
//             JobGate.
//           </NavLink>

//           {/* Nav Links */}
//           <ul className="hidden md:flex space-x-8 text-base font-medium font-heading">
//             {/* {role === "applicant" && ( */}
//             <NavLink to="/find-job" className=" hover:text-green-600">
//               Find Job
//             </NavLink>
//             {/* )} */}

//             {/* {role === "client" && ( */}
//             <NavLink to="find-talents" className=" hover:text-green-600">
//               Find Talents
//             </NavLink>
//             {/* )} */}

//             {role === "Applicant" && (
//               <NavLink to="/saved-jobs" className="hover:text-green-600">
//                 Saved Jobs
//               </NavLink>
//             )}

//             {/* {(role === "client" || "applicant") && ( */}
//             <NavLink to="/messages" className="hover:text-green-600">
//               Messages
//             </NavLink>
//             {/* )} */}
//             <NavLink to="/community" className="hover:text-green-600">
//               Community
//             </NavLink>
//           </ul>
//         </div>

//         <div className="flex items-center space-x-5 font-medium">
//           {!token ? (
//             <span className="flex gap-2">
//               <NavLink to="/auth/login" className="hover:text-green-600">
//                 Login
//               </NavLink>
//               <span>|</span>
//               <NavLink to="/auth/signup" className="hover:text-green-600">
//                 Sign up
//               </NavLink>
//             </span>
//           ) : (
//             <>
//               <div className="flex items-center text-3xl cursor-pointer">
//                 <NavLink to="/notifs">
//                   <MdNotificationsNone />
//                 </NavLink>
//               </div>

//               <Link className="text-3xl" to="/account">
//                 <MdOutlineAccountCircle />
//               </Link>
//             </>
//           )}

//           {role === "client" && (
//             <NavLink
//               to="/post-job"
//               className="py-2 px-4 font-medium border text-slate-100 border-green-700 rounded-md bg-green-700 hover:bg-green-800"
//             >
//               Post a Job
//             </NavLink>
//           )}
//         </div>
//       </div>
//     </nav>
//   );
// }










































// import React, { useState, useEffect } from "react";
// import JobDetailPage from "../Job Detail Page/JobDetailPage";
// import JobCard from "../Job cards/JobCard";
// import { useDispatch, useSelector } from "react-redux";
// import { fetchJobOffers } from "../../Store/actions/jobsActions";
// import { NavLink, useLocation, useNavigate } from "react-router-dom";
// import axiosInstance from "../../Config/axiosConfig"; // Assuming you have an axios instance

// const LatestJobs = () => {
//   const [selectedJob, setSelectedJob] = useState(null);
//   const [isDetailOpen, setIsDetailOpen] = useState(false);
//   const [saveStatus, setSaveStatus] = useState({ message: "", success: null }); // Reintroduced saveStatus state

//   const dispatch = useDispatch();
//   const navigate = useNavigate();

//   const jobsData = useSelector((state) => state.jobOffersReducer);

//   const location = useLocation();
//   const queryParams = new URLSearchParams(location.search);
//   const initialSearchQuery = queryParams.get("search") || "";
//   const initialLocationQuery = queryParams.get("location") || "";

//   const [searchQuery, setSearchQuery] = useState(initialSearchQuery);
//   const [locationQuery, setLocationQuery] = useState(initialLocationQuery);

//   useEffect(() => {
//     dispatch(fetchJobOffers({ search: searchQuery, location: locationQuery }));
//   }, [dispatch, searchQuery, locationQuery]);

//   const handleJobClick = (job) => {
//     setSelectedJob(job);
//     setIsDetailOpen(true);
//   };

//   const handleCloseDetail = () => {
//     setIsDetailOpen(false);
//     setSelectedJob(null);
//   };

//   const handleSearchChange = (e) => {
//     const value = e.target.value;
//     setSearchQuery(value);
//     // If the search input is cleared, update the URL
//     if (value === "") {
//       setLocationQuery(""); // Clear location query
//       navigate(`/find-job`); // Navigate to the route without search queries
//     }
//   };

//   const handleLocationChange = (e) => {
//     const value = e.target.value;
//     setLocationQuery(value);
//     // If the location input is cleared, update the URL
//     if (value === "") {
//       setSearchQuery(""); // Clear search query
//       navigate(`/find-job`); // Navigate to the route without location query
//     }
//   };

//   const handleSaveJob = async (jobId) => {
//     try {
//       const response = await axiosInstance.post("/save-job", { jobId });

//       // Update saveStatus with the success message
//       setSaveStatus({
//         message: response.data.message,
//         success: true,
//       });
//     } catch (error) {
//       const errorMessage =
//         error.response && error.response.data.error
//           ? error.response.data.error
//           : "Failed to save the job.";

//       // Update saveStatus with the error message
//       setSaveStatus({
//         message: errorMessage,
//         success: false,
//       });
//     }
//   };

//   return (
//     <section className="flex flex-col items-center justify- gap-14 py-20">
//       <div className="flex items-center justify-center">
//         <h1 className="heading text-slate-700 font-semibold capitalize">
//           explore <span className="text-green-700">jobs</span>
//         </h1>
//       </div>

//       <>
//         <div className="flex items-center w-full max-w-3xl">
//           <label htmlFor="" className="text-lg mr-4">
//             Search:{" "}
//           </label>
//           <div className="flex items-center bg-slate-200 rounded-lg overflow-hidden w-full">
//             <input
//               type="text"
//               className="flex-1 px-5 py-3 text-base bg-transparent text-gray-700 focus:outline-none"
//               placeholder="Enter job title, keywords..."
//               value={searchQuery}
//               onChange={handleSearchChange}
//             />

//             <span className="w-px h-10 bg-gray-300"></span>

//             <input
//               type="text"
//               className="flex-1 px-5 py-3 text-base bg-transparent text-gray-700 focus:outline-none"
//               placeholder="Enter location..."
//               value={locationQuery}
//               onChange={handleLocationChange}
//             />
//           </div>
//         </div>

//         <div className="grid grid-cols-1 lg:grid-cols-5 w-full max-w-8xl gap-8">
//           <div className="lg:col-span-4">
//             {jobsData.jobOffers && jobsData.jobOffers.length > 0 ? (
//               jobsData.jobOffers.map((job) => (
//                 <JobCard
//                   job={job}
//                   handleJobClick={handleJobClick}
//                   key={job.id}
//                   handleSaveJob={() => handleSaveJob(job.id)}
//                 />
//               ))
//             ) : (
//               <div>No jobs found.</div>
//             )}

//             <div className="flex items-center justify-center mt-8">
//               <NavLink
//                 to="/auth/login"
//                 className="px-7 py-3 bg-green-700 text-white font-medium tracking-wide rounded-md"
//               >
//                 Load More
//               </NavLink>
//             </div>
//           </div>

//           {isDetailOpen && selectedJob && (
//             <JobDetailPage
//               job={selectedJob}
//               onClose={handleCloseDetail}
//               onSave={handleSaveJob}
//             />
//           )}
//         </div>
//       </>

//       {/* Display Save Job Status */}
//       {saveStatus.message && (
//         <div
//           className={`mt-4 p-3 rounded-md text-white ${
//             saveStatus.success ? "bg-green-500" : "bg-red-500"
//           }`}
//         >
//           {saveStatus.message}
//         </div>
//       )}
//     </section>
//   );
// };

// export default LatestJobs;




























































// import { useState, useEffect, useCallback } from "react";
// import axios from "axios";
// import { FaSearch } from "react-icons/fa";
// import { AiOutlineFilter, AiOutlineUser } from "react-icons/ai";
// import debounce from "lodash/debounce";
// import Chat from "./Chat";
// import { useSelector } from "react-redux";

// export default function FindTalents() {
//   const [searchQuery, setSearchQuery] = useState("");
//   const [filter, setFilter] = useState("all");
//   const [talents, setTalents] = useState([]);
//   const [selectedTalent, setSelectedTalent] = useState(null);
//   const [isProfileModalOpen, setProfileModalOpen] = useState(false);
//   const [isMessageModalOpen, setMessageModalOpen] = useState(false);

//   const currentUser = useSelector((state) => state.auth.user);
//   const currentUserId = currentUser ? currentUser.id : null;
//   console.log(currentUserId);

//   const token = localStorage.getItem("token");

//   useEffect(() => {
//     // Fetch all talents on component mount
//     async function fetchTalents() {
//       try {
//         const response = await axios.get("http://localhost:5000/api/talents", {
//           headers: {
//             Authorization: `Bearer ${token}`,
//           },
//         });
//         setTalents(response.data);
//       } catch (error) {
//         console.error("Error fetching talents", error);
//       }
//     }
//     fetchTalents();
//   }, [token]);

//   // Define the debounced search function
//   const debouncedSearch = useCallback(
//     debounce(async (query) => {
//       try {
//         const response = await axios.get(
//           "http://localhost:5000/api/talents/search",
//           {
//             headers: {
//               Authorization: `Bearer ${token}`,
//             },
//             params: { name: query },
//           }
//         );
//         console.log(response.data); // Add this to check the response
//         setTalents(response.data);
//       } catch (error) {
//         console.error("Error searching talents", error);
//       }
//     }, 50),
//     [token]
//   );

//   // Handle search input change
//   const handleSearchInputChange = (e) => {
//     const query = e.target.value.trim();
//     setSearchQuery(query);
//     if (query) {
//       debouncedSearch(query);
//     } else {
//       // Optionally reset talents list when search query is cleared
//       setTalents([]);
//     }
//   };

//   // Handle filter toggle
//   const handleFilterToggle = () => {
//     setFilter((prevFilter) => (prevFilter === "all" ? "featured" : "all"));
//   };

//   const openProfileModal = (talent) => {
//     setSelectedTalent(talent);
//     setProfileModalOpen(true);
//   };

//   const closeProfileModal = () => {
//     setProfileModalOpen(false);
//   };

//   const openMessageModal = (talent) => {
//     setSelectedTalent(talent);
//     setMessageModalOpen(true);
//   };

//   return (
//     <section className="flex flex-col items-center justify-center gap-14 py-20">
//       <h1 className="heading text-slate-700 font-semibold capitalize">
//         Find <span className="text-green-700">Talents</span>
//       </h1>

//       <div className="w-full">
//         <div className="flex flex-col md:flex-row gap-6 mb-12">
//           <div className="relative w-full md:w-2/3">
//             <input
//               type="text"
//               placeholder="Search talents by name, skills, etc."
//               value={searchQuery}
//               onChange={handleSearchInputChange}
//               className="w-full py-3 pl-10 pr-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-700"
//             />
//             <FaSearch className="absolute left-3 top-3 text-gray-500 cursor-pointer" />
//           </div>

//           <div className="relative w-full md:w-1/3">
//             <button
//               onClick={handleFilterToggle}
//               className="w-full py-3 px-4 border border-gray-300 rounded-lg bg-green-700 text-white flex items-center justify-center gap-2 hover:bg-green-800"
//             >
//               <AiOutlineFilter />
//               {filter === "all" ? "Show Featured" : "Show All"}
//             </button>
//           </div>
//         </div>

//         {/* Talents Grid */}
//         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-12">
//           {talents.map((talent) => (
//             <div
//               key={talent.id}
//               className="relative bg-white rounded-lg shadow-lg overflow-hidden"
//             >
//               <img
//                 src={talent.profile_picture || "default-image-url"}
//                 alt={talent.fullname}
//                 className="w-full h-48 object-cover"
//               />
//               <div className="p-6">
//                 <h3 className="text-xl font-semibold text-slate-800 mb-2">
//                   {talent.fullname}
//                 </h3>
//                 <p className="text-gray-600 mb-2">
//                   <strong>Location:</strong> {talent.location}
//                 </p>
//                 <p className="text-gray-600 mb-2">
//                   <strong>Profile:</strong> {talent.profile_description}
//                 </p>
//                 <p className="text-gray-600">
//                   <strong>Skills:</strong> {talent.skills.join(", ")}
//                 </p>

//                 {/* View Profile and Message Buttons */}
//                 <div className="flex justify-end gap-3 mt-4">
//                   <button
//                     onClick={() => openProfileModal(talent)}
//                     className="bg-blue-600 text-white px-4 py-2 rounded-lg"
//                   >
//                     View Profile
//                   </button>
//                   <button
//                     onClick={() => openMessageModal(talent)}
//                     className="bg-green-600 text-white px-4 py-2 rounded-lg"
//                   >
//                     Message
//                   </button>
//                 </div>
//               </div>
//             </div>
//           ))}
//         </div>

//         {isProfileModalOpen && selectedTalent && (
//           <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
//             <div className="bg-white p-8 rounded-lg shadow-lg w-2/4">
//               <h2 className="text-2xl font-semibold mb-4">
//                 {selectedTalent.fullname}
//               </h2>
//               <p>
//                 <strong>Bio:</strong> {selectedTalent.profile_description}
//               </p>
//               <p>
//                 <strong>Location:</strong> {selectedTalent.location}
//               </p>
//               <p>
//                 <strong>Skills:</strong> {selectedTalent.skills.join(", ")}
//               </p>
//               <button
//                 onClick={closeProfileModal}
//                 className="mt-4 bg-red-500 text-white px-4 py-2 rounded-lg"
//               >
//                 Close
//               </button>
//             </div>
//           </div>
//         )}

//         {/* Message Modal */}
//         {isMessageModalOpen && selectedTalent && (
//           <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
//             <Chat currentUser={currentUser} selectedTalent={selectedTalent} />
//           </div>
//         )}
//       </div>
//     </section>
//   );
// }

































// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import { FaEnvelope, FaBriefcase, FaUserAlt } from "react-icons/fa";

// const AdminPanel = () => {
//   const [users, setUsers] = useState([]);
//   const [messages, setMessages] = useState([]);
//   const [jobs, setJobs] = useState([]);

//   const fetchUsers = async () => {
//     try {
//       const response = await axios.get("http://localhost:5000/api/users", {
//         headers: {
//           Authorization: `Bearer ${localStorage.getItem("token")}`, // Ensure token is stored
//         },
//       });
//       setUsers(response.data.data);
//     } catch (error) {
//       console.error("Error fetching users:", error);
//     }
//   };

//   const fetchMessages = async () => {
//     try {
//       const response = await axios.get(
//         "http://localhost:5000/api/contact-messages",
//         {
//           headers: {
//             Authorization: `Bearer ${localStorage.getItem("token")}`,
//           },
//         }
//       );
//       setMessages(response.data.data);
//     } catch (error) {
//       console.error("Error fetching messages:", error);
//     }
//   };

//   const fetchJobs = async () => {
//     try {
//       const response = await axios.get("http://localhost:5000/api/today-jobs", {
//         headers: {
//           Authorization: `Bearer ${localStorage.getItem("token")}`,
//         },
//       });
//       setJobs(response.data.data || response.data);
//     } catch (error) {
//       console.error("Error fetching jobs:", error);
//     }
//   };

//   useEffect(() => {
//     fetchUsers();
//     fetchMessages();
//     fetchJobs();
//   }, []);

//   return (
// <div className="flex min-h-screen bg-gray-100 py-20">
//   {/* Sidebar */}
//   <aside className="w-64 bg-gray-800 text-white flex flex-col shadow-lg">
//     <div className="p-4 text-center text-2xl font-bold">Admin Panel</div>
//     <nav className="flex-1 p-4 space-y-2">
//       <a
//         href="#users"
//         className="flex items-center p-2 hover:bg-gray-700 rounded transition"
//       >
//         <FaUserAlt className="mr-2" />
//         Users
//       </a>
//       <a
//         href="#messages"
//         className="flex items-center p-2 hover:bg-gray-700 rounded transition"
//       >
//         <FaEnvelope className="mr-2" />
//         Contact Messages
//       </a>
//       <a
//         href="#jobs"
//         className="flex items-center p-2 hover:bg-gray-700 rounded transition"
//       >
//         <FaBriefcase className="mr-2" />
//         Jobs
//       </a>
//     </nav>
//   </aside>

//   {/* Main Content */}
//   <div className="flex-1 p-10">
//     <div className="flex justify-between items-center mb-8">
//       <h1 className="text-4xl font-bold text-gray-800">
//         Dashboard Overview
//       </h1>
//       <button className="bg-blue-600 text-white px-4 py-2 rounded shadow hover:bg-blue-700 transition">
//         Logout
//       </button>
//     </div>

//     <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
//       {/* Total Users Card */}
//       <div className="bg-white p-6 rounded-lg shadow-lg transition-transform transform hover:scale-105">
//         <h2 className="text-xl font-semibold mb-4">Total Users</h2>
//         <p className="text-3xl font-bold">{users.length}</p>
//       </div>

//       {/* Total Messages Card */}
//       <div className="bg-white p-6 rounded-lg shadow-lg transition-transform transform hover:scale-105">
//         <h2 className="text-xl font-semibold mb-4">Total Messages</h2>
//         <p className="text-3xl font-bold">{messages.length}</p>
//       </div>

//       {/* Total Jobs Card */}
//       <div className="bg-white p-6 rounded-lg shadow-lg transition-transform transform hover:scale-105">
//         <h2 className="text-xl font-semibold mb-4">Total Jobs</h2>
//         <p className="text-3xl font-bold">{jobs.length}</p>
//       </div>
//     </div>

//     {/* Users Section */}
//     <section id="users" className="mb-8">
//       <h2 className="text-2xl font-bold mb-4">Users</h2>
//       <ul className="bg-white p-4 rounded-lg shadow divide-y">
//         {users.map((user) => (
//           <li key={user.id} className="py-2 hover:bg-gray-100 transition">
//             {user.fullname} - {user.email}
//           </li>
//         ))}
//       </ul>
//     </section>

//     {/* Messages Section */}
//     <section id="messages" className="mb-8">
//       <h2 className="text-2xl font-bold mb-4">Contact Messages</h2>
//       <ul className="bg-white p-4 rounded-lg shadow divide-y">
//         {messages.map((message) => (
//           <li
//             key={message.id}
//             className="py-2 hover:bg-gray-100 transition"
//           >
//             {message.message} - From: {message.email}
//           </li>
//         ))}
//       </ul>
//     </section>

//     {/* Jobs Section */}
//     <section id="jobs">
//       <h2 className="text-2xl font-bold mb-4">Today's Jobs</h2>
//       <ul className="bg-white p-4 rounded-lg shadow divide-y">
//         {jobs.map((job) => (
//           <li key={job.id} className="py-2 hover:bg-gray-100 transition">
//             {job.title} - {new Date(job.created_at).toLocaleString()}
//           </li>
//         ))}
//       </ul>
//     </section>
//   </div>
// </div>
//   );
// };

// export default AdminPanel;




















// import React, { useState } from "react";
// import axios from "axios";
// import CreatableSelect from "react-select/creatable";

// const JobPostingPage = () => {
//   const [formData, setFormData] = useState({
//     title: "",
//     description: "",
//     experience_level: "",
//     location: "",
//     salary: "",
//     type: "",
//     preferred_qualifications: "",
//     project_length: "",
//     skills: [],
//   });
//   const [message, setMessage] = useState("");
//   const [error, setError] = useState("");

//   const handleChange = (e) => {
//     setFormData({ ...formData, [e.target.name]: e.target.value });
//   };

//   // Handle skills input with CreatableSelect
//   const handleSkillsChange = (selectedOptions) => {
//     const skillsArray = selectedOptions.map((option) => option.value);

//     setFormData({
//       ...formData,
//       skills: skillsArray, // Keep it as an array
//     });
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();

//     console.log("Form data before submission:", formData);

//     try {
//       const token = localStorage.getItem("token");

//       const formDataToSubmit = new FormData();
//       Object.keys(formData).forEach((key) => {
//         if (key === "skills") {
//           formDataToSubmit.append(key, formData[key].join(", "));
//         } else {
//           formDataToSubmit.append(key, formData[key]);
//         }
//       });

//       console.log(
//         "Form data to submit:",
//         Array.from(formDataToSubmit.entries())
//       );

//       const response = await axios.post(
//         "http://localhost:5000/api/post-job",
//         formDataToSubmit,
//         {
//           headers: {
//             "Content-Type": "multipart/form-data",
//             Authorization: `Bearer ${token}`,
//           },
//         }
//       );

//       if (response.status === 201) {
//         setMessage("Job posted successfully");
//         setError("");
//       }
//     } catch (error) {
//       setMessage("");
//       setError(
//         error.response?.data?.message || `An error occurred. ${error.message}`
//       );
//     }
//   };

//   return (
//     <div className="flex items-center justify-center flex-col gap-14 py-20">
//       <h1 className="heading text-slate-700 font-semibold capitalize">
//         Post a <span className="text-green-700">Job!</span>
//       </h1>

//       <div className="px-20 w-full">
//         <div className="w-full p-8 border border-gray-200">
//           <p className="text-lg text-gray-600 mb-7">
//             <span className="uppercase text-green-700 text-xl font-semibold mr-1">
//               Notice:
//             </span>
//             Fill out the detailed form below to post a job on our platform.
//           </p>

//           <h2 className="text-3xl font-bold text-green-700 mb-6">
//             Job Details
//           </h2>
//           <form onSubmit={handleSubmit} className="space-y-6">
//             {/* Job Title */}
//             <div>
//               <label
//                 htmlFor="title"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Job Title
//               </label>
//               <input
//                 id="title"
//                 name="title"
//                 type="text"
//                 value={formData.title}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4"
//               />
//             </div>

//             {/* Description */}
//             <div>
//               <label
//                 htmlFor="description"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Description
//               </label>
//               <textarea
//                 id="description"
//                 name="description"
//                 rows="4"
//                 value={formData.description}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4"
//               />
//             </div>

//             {/* Experience Level */}
//             <div>
//               <label
//                 htmlFor="experience_level"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Experience Level
//               </label>
//               <select
//                 id="experience_level"
//                 name="experience_level"
//                 value={formData.experience_level}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4"
//               >
//                 <option value="" disabled>
//                   Select experience level
//                 </option>
//                 <option value="Entry">Entry Level</option>
//                 <option value="Mid">Mid Level</option>
//                 <option value="Senior">Senior Level</option>
//               </select>
//             </div>

//             {/* Location */}
//             <div>
//               <label
//                 htmlFor="location"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Location
//               </label>
//               <input
//                 id="location"
//                 name="location"
//                 type="text"
//                 value={formData.location}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4"
//               />
//             </div>

//             {/* Preferred Qualifications */}
//             <div>
//               <label
//                 htmlFor="preferred_qualifications"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Preferred Qualifications
//               </label>
//               <input
//                 id="preferred_qualifications"
//                 name="preferred_qualifications"
//                 type="text"
//                 value={formData.preferred_qualifications}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4"
//               />
//             </div>

// {/* Skills */}
// <div>
//   <label
//     htmlFor="skills"
//     className="block text-lg font-medium text-gray-700 mb-2"
//   >
//     Preferred Skills
//   </label>
//   <CreatableSelect
//     isMulti
//     onChange={handleSkillsChange}
//     placeholder="Add skills"
//     className="w-full"
//   />
// </div>

//             {/* Salary */}
//             <div>
//               <label
//                 htmlFor="salary"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Salary
//               </label>
//               <input
//                 id="salary"
//                 name="salary"
//                 type="text"
//                 value={formData.salary}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4"
//               />
//             </div>

//             {/* Project Length */}
//             <div>
//               <label
//                 htmlFor="project_length"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Project Length
//               </label>
//               <input
//                 id="project_length"
//                 name="project_length"
//                 type="text"
//                 value={formData.project_length}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4"
//               />
//             </div>

//             {/* Job Type */}
//             <div>
//               <label
//                 htmlFor="type"
//                 className="block text-lg font-medium text-gray-700 mb-2"
//               >
//                 Job Type
//               </label>
//               <select
//                 id="type"
//                 name="type"
//                 value={formData.type}
//                 onChange={handleChange}
//                 required
//                 className="w-full border border-gray-300 rounded-xl p-4"
//               >
//                 <option value="" disabled>
//                   Select job type
//                 </option>
//                 <option value="Full-time">Full-time</option>
//                 <option value="Part-time">Part-time</option>
//                 <option value="Contract">Contract</option>
//               </select>
//             </div>

//             {/* Submit Button */}
//             <div className="flex justify-center">
//               <button
//                 type="submit"
//                 className="bg-green-600 text-white py-4 px-8 rounded-xl hover:bg-green-700 transition-colors duration-300"
//               >
//                 Post Job
//               </button>
//             </div>
//           </form>

//           {message && (
//             <p className="mt-6 text-center text-green-600">{message}</p>
//           )}
//           {error && <p className="mt-6 text-center text-red-600">{error}</p>}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default JobPostingPage;